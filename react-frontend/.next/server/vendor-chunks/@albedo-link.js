"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@albedo-link";
exports.ids = ["vendor-chunks/@albedo-link"];
exports.modules = {

/***/ "(ssr)/./node_modules/@albedo-link/intent/src/implicit-session-storage.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@albedo-link/intent/src/implicit-session-storage.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   forgetSession: () => (/* binding */ forgetSession),\n/* harmony export */   getAllImplicitSessions: () => (/* binding */ getAllImplicitSessions),\n/* harmony export */   getImplicitSession: () => (/* binding */ getImplicitSession),\n/* harmony export */   saveImplicitSession: () => (/* binding */ saveImplicitSession)\n/* harmony export */ });\n/* harmony import */ var _implicit_session__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./implicit-session */ \"(ssr)/./node_modules/@albedo-link/intent/src/implicit-session.js\");\n\r\n\r\nconst storagePrefix = 'albedo_session_',\r\n    implicitSessions = {}\r\n\r\nfunction getStorage() {\r\n    return window.sessionStorage\r\n}\r\n\r\n/**\r\n * Whether to save the session to the browser internal session storage - allows sharing of session data\r\n * between multiple browser tabs but potentially is less secure than the local variable storage.\r\n * @type {boolean}\r\n */\r\nconst saveToBrowserStorage = true\r\n\r\nfunction saveImplicitSession(intentResult) {\r\n    const session = new _implicit_session__WEBPACK_IMPORTED_MODULE_0__[\"default\"](intentResult)\r\n    if (!saveToBrowserStorage) {\r\n        implicitSessions[session.pubkey] = session\r\n    } else {\r\n        getStorage().setItem(storagePrefix + session.pubkey, JSON.stringify(session))\r\n    }\r\n}\r\n\r\nfunction retrieveSessionFromStorage(pubkey) {\r\n    let session\r\n    if (!saveToBrowserStorage) {\r\n        session = implicitSessions[pubkey]\r\n    } else {\r\n        const restored = getStorage().getItem(storagePrefix + pubkey)\r\n        if (restored) {\r\n            session = new _implicit_session__WEBPACK_IMPORTED_MODULE_0__[\"default\"](JSON.parse(restored))\r\n        }\r\n    }\r\n    if (!session) return null\r\n    if (session.isExpired) {\r\n        forgetSession(pubkey)\r\n        return null\r\n    }\r\n    return session\r\n}\r\n\r\n/**\r\n * Find active implicit session by intent and pubkey.\r\n * @param {String} intent - Intent code.\r\n * @param {String} pubkey - Public key associated with the session.\r\n * @return {ImplicitSession|null}\r\n */\r\nfunction getImplicitSession(intent, pubkey) {\r\n    const session = retrieveSessionFromStorage(pubkey)\r\n    if (!session || !session.grants.includes(intent)) return null\r\n    return session\r\n}\r\n\r\n/**\r\n * Retrieve all active sessions.\r\n * @return {Array<ImplicitSession>}\r\n */\r\nfunction getAllImplicitSessions() {\r\n    const storage = getStorage()\r\n    return Object.keys(storage)\r\n        .filter(key => key.indexOf(storagePrefix) === 0)\r\n        .map(key => retrieveSessionFromStorage(key.substr(storagePrefix.length)))\r\n        .filter(session => !!session)\r\n}\r\n\r\n/**\r\n * Remove an explicit session handler from the storage.\r\n * @param {String} pubkey - Public key associated with the session.\r\n */\r\nfunction forgetSession(pubkey) {\r\n    if (!saveToBrowserStorage) {\r\n        delete implicitSessions[pubkey]\r\n    } else {\r\n        getStorage().removeItem(storagePrefix + pubkey)\r\n    }\r\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFsYmVkby1saW5rL2ludGVudC9zcmMvaW1wbGljaXQtc2Vzc2lvbi1zdG9yYWdlLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQWdEO0FBQ2hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ087QUFDUCx3QkFBd0IseURBQWU7QUFDdkM7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQSwwQkFBMEIseURBQWU7QUFDekM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLFdBQVcsUUFBUTtBQUNuQixZQUFZO0FBQ1o7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkI7QUFDTztBQUNQO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaW52ZW50b3J5LW1hbmFnZXItZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvQGFsYmVkby1saW5rL2ludGVudC9zcmMvaW1wbGljaXQtc2Vzc2lvbi1zdG9yYWdlLmpzPzE4NTciXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEltcGxpY2l0U2Vzc2lvbiBmcm9tICcuL2ltcGxpY2l0LXNlc3Npb24nXHJcblxyXG5jb25zdCBzdG9yYWdlUHJlZml4ID0gJ2FsYmVkb19zZXNzaW9uXycsXHJcbiAgICBpbXBsaWNpdFNlc3Npb25zID0ge31cclxuXHJcbmZ1bmN0aW9uIGdldFN0b3JhZ2UoKSB7XHJcbiAgICByZXR1cm4gd2luZG93LnNlc3Npb25TdG9yYWdlXHJcbn1cclxuXHJcbi8qKlxyXG4gKiBXaGV0aGVyIHRvIHNhdmUgdGhlIHNlc3Npb24gdG8gdGhlIGJyb3dzZXIgaW50ZXJuYWwgc2Vzc2lvbiBzdG9yYWdlIC0gYWxsb3dzIHNoYXJpbmcgb2Ygc2Vzc2lvbiBkYXRhXHJcbiAqIGJldHdlZW4gbXVsdGlwbGUgYnJvd3NlciB0YWJzIGJ1dCBwb3RlbnRpYWxseSBpcyBsZXNzIHNlY3VyZSB0aGFuIHRoZSBsb2NhbCB2YXJpYWJsZSBzdG9yYWdlLlxyXG4gKiBAdHlwZSB7Ym9vbGVhbn1cclxuICovXHJcbmNvbnN0IHNhdmVUb0Jyb3dzZXJTdG9yYWdlID0gdHJ1ZVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHNhdmVJbXBsaWNpdFNlc3Npb24oaW50ZW50UmVzdWx0KSB7XHJcbiAgICBjb25zdCBzZXNzaW9uID0gbmV3IEltcGxpY2l0U2Vzc2lvbihpbnRlbnRSZXN1bHQpXHJcbiAgICBpZiAoIXNhdmVUb0Jyb3dzZXJTdG9yYWdlKSB7XHJcbiAgICAgICAgaW1wbGljaXRTZXNzaW9uc1tzZXNzaW9uLnB1YmtleV0gPSBzZXNzaW9uXHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIGdldFN0b3JhZ2UoKS5zZXRJdGVtKHN0b3JhZ2VQcmVmaXggKyBzZXNzaW9uLnB1YmtleSwgSlNPTi5zdHJpbmdpZnkoc2Vzc2lvbikpXHJcbiAgICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHJldHJpZXZlU2Vzc2lvbkZyb21TdG9yYWdlKHB1YmtleSkge1xyXG4gICAgbGV0IHNlc3Npb25cclxuICAgIGlmICghc2F2ZVRvQnJvd3NlclN0b3JhZ2UpIHtcclxuICAgICAgICBzZXNzaW9uID0gaW1wbGljaXRTZXNzaW9uc1twdWJrZXldXHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIGNvbnN0IHJlc3RvcmVkID0gZ2V0U3RvcmFnZSgpLmdldEl0ZW0oc3RvcmFnZVByZWZpeCArIHB1YmtleSlcclxuICAgICAgICBpZiAocmVzdG9yZWQpIHtcclxuICAgICAgICAgICAgc2Vzc2lvbiA9IG5ldyBJbXBsaWNpdFNlc3Npb24oSlNPTi5wYXJzZShyZXN0b3JlZCkpXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgaWYgKCFzZXNzaW9uKSByZXR1cm4gbnVsbFxyXG4gICAgaWYgKHNlc3Npb24uaXNFeHBpcmVkKSB7XHJcbiAgICAgICAgZm9yZ2V0U2Vzc2lvbihwdWJrZXkpXHJcbiAgICAgICAgcmV0dXJuIG51bGxcclxuICAgIH1cclxuICAgIHJldHVybiBzZXNzaW9uXHJcbn1cclxuXHJcbi8qKlxyXG4gKiBGaW5kIGFjdGl2ZSBpbXBsaWNpdCBzZXNzaW9uIGJ5IGludGVudCBhbmQgcHVia2V5LlxyXG4gKiBAcGFyYW0ge1N0cmluZ30gaW50ZW50IC0gSW50ZW50IGNvZGUuXHJcbiAqIEBwYXJhbSB7U3RyaW5nfSBwdWJrZXkgLSBQdWJsaWMga2V5IGFzc29jaWF0ZWQgd2l0aCB0aGUgc2Vzc2lvbi5cclxuICogQHJldHVybiB7SW1wbGljaXRTZXNzaW9ufG51bGx9XHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gZ2V0SW1wbGljaXRTZXNzaW9uKGludGVudCwgcHVia2V5KSB7XHJcbiAgICBjb25zdCBzZXNzaW9uID0gcmV0cmlldmVTZXNzaW9uRnJvbVN0b3JhZ2UocHVia2V5KVxyXG4gICAgaWYgKCFzZXNzaW9uIHx8ICFzZXNzaW9uLmdyYW50cy5pbmNsdWRlcyhpbnRlbnQpKSByZXR1cm4gbnVsbFxyXG4gICAgcmV0dXJuIHNlc3Npb25cclxufVxyXG5cclxuLyoqXHJcbiAqIFJldHJpZXZlIGFsbCBhY3RpdmUgc2Vzc2lvbnMuXHJcbiAqIEByZXR1cm4ge0FycmF5PEltcGxpY2l0U2Vzc2lvbj59XHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gZ2V0QWxsSW1wbGljaXRTZXNzaW9ucygpIHtcclxuICAgIGNvbnN0IHN0b3JhZ2UgPSBnZXRTdG9yYWdlKClcclxuICAgIHJldHVybiBPYmplY3Qua2V5cyhzdG9yYWdlKVxyXG4gICAgICAgIC5maWx0ZXIoa2V5ID0+IGtleS5pbmRleE9mKHN0b3JhZ2VQcmVmaXgpID09PSAwKVxyXG4gICAgICAgIC5tYXAoa2V5ID0+IHJldHJpZXZlU2Vzc2lvbkZyb21TdG9yYWdlKGtleS5zdWJzdHIoc3RvcmFnZVByZWZpeC5sZW5ndGgpKSlcclxuICAgICAgICAuZmlsdGVyKHNlc3Npb24gPT4gISFzZXNzaW9uKVxyXG59XHJcblxyXG4vKipcclxuICogUmVtb3ZlIGFuIGV4cGxpY2l0IHNlc3Npb24gaGFuZGxlciBmcm9tIHRoZSBzdG9yYWdlLlxyXG4gKiBAcGFyYW0ge1N0cmluZ30gcHVia2V5IC0gUHVibGljIGtleSBhc3NvY2lhdGVkIHdpdGggdGhlIHNlc3Npb24uXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gZm9yZ2V0U2Vzc2lvbihwdWJrZXkpIHtcclxuICAgIGlmICghc2F2ZVRvQnJvd3NlclN0b3JhZ2UpIHtcclxuICAgICAgICBkZWxldGUgaW1wbGljaXRTZXNzaW9uc1twdWJrZXldXHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIGdldFN0b3JhZ2UoKS5yZW1vdmVJdGVtKHN0b3JhZ2VQcmVmaXggKyBwdWJrZXkpXHJcbiAgICB9XHJcbn0iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@albedo-link/intent/src/implicit-session-storage.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@albedo-link/intent/src/implicit-session.js":
/*!******************************************************************!*\
  !*** ./node_modules/@albedo-link/intent/src/implicit-session.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nfunction ImplicitSession({session, pubkey, grants, valid_until}) {\r\n    this.key = session\r\n    this.pubkey = pubkey\r\n    this.grants = grants.slice()\r\n    this.validUntil = valid_until\r\n    //prevent accidental changes\r\n    Object.freeze(this)\r\n    Object.freeze(this.grants)\r\n}\r\n\r\nImplicitSession.prototype = {\r\n    /**\r\n     * Unique session key.\r\n     * @type {String}\r\n     */\r\n    key: '',\r\n\r\n    /**\r\n     * Public key of the key pair used to authorize the session.\r\n     * @type {String}\r\n     */\r\n    pubkey: '',\r\n\r\n    /**\r\n     * Granted permissions.\r\n     * @type {Array<String>}\r\n     */\r\n    grants: [],\r\n\r\n    /**\r\n     * Time-to-live.\r\n     * @type {Number}\r\n     */\r\n    validUntil: 0,\r\n\r\n    /**\r\n     * Check whether the session is expired or not.\r\n     * @return {boolean}\r\n     */\r\n    get isExpired() {\r\n        //2 seconds reserve\r\n        return this.validUntil - 2000 < new Date().getTime()\r\n    },\r\n\r\n    toJSON() {\r\n        return {\r\n            session: this.key,\r\n            pubkey: this.pubkey,\r\n            grants: this.grants.slice(),\r\n            valid_until: this.validUntil\r\n        }\r\n    }\r\n}\r\n\r\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (ImplicitSession);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFsYmVkby1saW5rL2ludGVudC9zcmMvaW1wbGljaXQtc2Vzc2lvbi5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUEsMEJBQTBCLHFDQUFxQztBQUMvRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUVBQWUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pbnZlbnRvcnktbWFuYWdlci1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9AYWxiZWRvLWxpbmsvaW50ZW50L3NyYy9pbXBsaWNpdC1zZXNzaW9uLmpzP2M2OTgiXSwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gSW1wbGljaXRTZXNzaW9uKHtzZXNzaW9uLCBwdWJrZXksIGdyYW50cywgdmFsaWRfdW50aWx9KSB7XHJcbiAgICB0aGlzLmtleSA9IHNlc3Npb25cclxuICAgIHRoaXMucHVia2V5ID0gcHVia2V5XHJcbiAgICB0aGlzLmdyYW50cyA9IGdyYW50cy5zbGljZSgpXHJcbiAgICB0aGlzLnZhbGlkVW50aWwgPSB2YWxpZF91bnRpbFxyXG4gICAgLy9wcmV2ZW50IGFjY2lkZW50YWwgY2hhbmdlc1xyXG4gICAgT2JqZWN0LmZyZWV6ZSh0aGlzKVxyXG4gICAgT2JqZWN0LmZyZWV6ZSh0aGlzLmdyYW50cylcclxufVxyXG5cclxuSW1wbGljaXRTZXNzaW9uLnByb3RvdHlwZSA9IHtcclxuICAgIC8qKlxyXG4gICAgICogVW5pcXVlIHNlc3Npb24ga2V5LlxyXG4gICAgICogQHR5cGUge1N0cmluZ31cclxuICAgICAqL1xyXG4gICAga2V5OiAnJyxcclxuXHJcbiAgICAvKipcclxuICAgICAqIFB1YmxpYyBrZXkgb2YgdGhlIGtleSBwYWlyIHVzZWQgdG8gYXV0aG9yaXplIHRoZSBzZXNzaW9uLlxyXG4gICAgICogQHR5cGUge1N0cmluZ31cclxuICAgICAqL1xyXG4gICAgcHVia2V5OiAnJyxcclxuXHJcbiAgICAvKipcclxuICAgICAqIEdyYW50ZWQgcGVybWlzc2lvbnMuXHJcbiAgICAgKiBAdHlwZSB7QXJyYXk8U3RyaW5nPn1cclxuICAgICAqL1xyXG4gICAgZ3JhbnRzOiBbXSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIFRpbWUtdG8tbGl2ZS5cclxuICAgICAqIEB0eXBlIHtOdW1iZXJ9XHJcbiAgICAgKi9cclxuICAgIHZhbGlkVW50aWw6IDAsXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDaGVjayB3aGV0aGVyIHRoZSBzZXNzaW9uIGlzIGV4cGlyZWQgb3Igbm90LlxyXG4gICAgICogQHJldHVybiB7Ym9vbGVhbn1cclxuICAgICAqL1xyXG4gICAgZ2V0IGlzRXhwaXJlZCgpIHtcclxuICAgICAgICAvLzIgc2Vjb25kcyByZXNlcnZlXHJcbiAgICAgICAgcmV0dXJuIHRoaXMudmFsaWRVbnRpbCAtIDIwMDAgPCBuZXcgRGF0ZSgpLmdldFRpbWUoKVxyXG4gICAgfSxcclxuXHJcbiAgICB0b0pTT04oKSB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgc2Vzc2lvbjogdGhpcy5rZXksXHJcbiAgICAgICAgICAgIHB1YmtleTogdGhpcy5wdWJrZXksXHJcbiAgICAgICAgICAgIGdyYW50czogdGhpcy5ncmFudHMuc2xpY2UoKSxcclxuICAgICAgICAgICAgdmFsaWRfdW50aWw6IHRoaXMudmFsaWRVbnRpbFxyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgSW1wbGljaXRTZXNzaW9uIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@albedo-link/intent/src/implicit-session.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@albedo-link/intent/src/index.js":
/*!*******************************************************!*\
  !*** ./node_modules/@albedo-link/intent/src/index.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   intentErrors: () => (/* reexport safe */ _intent_errors__WEBPACK_IMPORTED_MODULE_2__[\"default\"]),\n/* harmony export */   intentInterface: () => (/* reexport safe */ _intent_interface__WEBPACK_IMPORTED_MODULE_1__[\"default\"])\n/* harmony export */ });\n/* harmony import */ var _random_token_generator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./random-token-generator */ \"(ssr)/./node_modules/@albedo-link/intent/src/random-token-generator.js\");\n/* harmony import */ var _intent_interface__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./intent-interface */ \"(ssr)/./node_modules/@albedo-link/intent/src/intent-interface.js\");\n/* harmony import */ var _intent_errors__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./intent-errors */ \"(ssr)/./node_modules/@albedo-link/intent/src/intent-errors.js\");\n/* harmony import */ var _intent_dispatcher__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./intent-dispatcher */ \"(ssr)/./node_modules/@albedo-link/intent/src/intent-dispatcher.js\");\n/* harmony import */ var _implicit_session_storage__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./implicit-session-storage */ \"(ssr)/./node_modules/@albedo-link/intent/src/implicit-session-storage.js\");\n/* harmony import */ var _web_stellar_handler__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./web+stellar-handler */ \"(ssr)/./node_modules/@albedo-link/intent/src/web+stellar-handler.js\");\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nif (typeof window === 'object' && typeof window.fetch !== 'function') {\r\n    throw new Error('Browser FetchAPI is not available. For legacy browsers support use polyfills such as whatwg-fetch.')\r\n}\r\n\r\n/**\r\n * Albedo API external interface implementation.\r\n */\r\nfunction AlbedoIntent() {\r\n}\r\n\r\nAlbedoIntent.prototype = {\r\n    frontendUrl: 'https://albedo.link',\r\n    intentInterface: _intent_interface__WEBPACK_IMPORTED_MODULE_1__[\"default\"],\r\n    intentErrors: _intent_errors__WEBPACK_IMPORTED_MODULE_2__[\"default\"],\r\n    /**\r\n     * Initiate external intent request.\r\n     * @param {String} intent - Intent name.\r\n     * @param {Object} [params] - Request parameters.\r\n     * @returns {Promise<Object>}\r\n     */\r\n    request(intent, params) {\r\n        return (0,_intent_dispatcher__WEBPACK_IMPORTED_MODULE_3__.requestIntentConfirmation)(Object.assign(params || {}, {intent}), this.frontendUrl)\r\n    },\r\n\r\n    /**\r\n     * Requests temporary permissions to execute the specific intents without calling confirmation dialog.\r\n     * @param {Object} params - Intent parameters.\r\n     * @param {Array<String>} params.intents - Requested intents.\r\n     * @returns {Promise<ImplicitFlowIntentResult>}\r\n     */\r\n    implicitFlow(params) {\r\n        return this.request('implicit_flow', params)\r\n    },\r\n\r\n    /**\r\n     * Request secure third-party application authentication.\r\n     * @param {Object} params - Intent parameters.\r\n     * @param {String} [params.token] - Verification token generated by the application (should be unique or random).\r\n     * @param {String} [params.require_existing] - Allow existing Albedo accounts only.\r\n     * @returns {Promise<PublicKeyIntentResult>}\r\n     */\r\n    publicKey(params) {\r\n        params = Object.assign({}, params)\r\n        if (!params.token) {\r\n            params.token = (0,_random_token_generator__WEBPACK_IMPORTED_MODULE_0__.generateRandomToken)()\r\n        }\r\n        return this.request('public_key', params)\r\n    },\r\n\r\n    /**\r\n     * Request transaction signing, returns the signed transaction envelope.\r\n     * @param {Object} params - Intent parameters.\r\n     * @param {String} params.xdr - A Stellar transaction in XDR format encoded in base64.\r\n     * @param {String} [params.pubkey] - Specific public key requested by the application.\r\n     * @param {String} [params.network] - Stellar network identifier or private network passphrase.\r\n     * @param {Boolean} [params.submit] - If set, the signed transaction will be submitted to the Horizon server instead of returning it to the application.\r\n     * @returns {Promise<TxIntentResult>}\r\n     */\r\n    tx(params) {\r\n        //TODO: check if txXdr is a Transaction instance and serialize it\r\n        return this.request('tx', params)\r\n    },\r\n\r\n    /**\r\n     * Requests execution of several tx intents bundled together. This intent is atomic – a user confirms or rejects all bundled requests at once, with the same account and the same Stellar network.\r\n     * @param {Object} params - Intent parameters.\r\n     * @param {String} params.intents - Requested tx intents.\r\n     * @param {String} [params.pubkey] - Specific public key requested by the application.\r\n     * @param {String} [params.network] - Stellar network identifier or private network passphrase.\r\n     * @returns {Promise<BatchIntentResult>}\r\n     */\r\n    batch(params) {\r\n        return this.request('batch', params)\r\n    },\r\n\r\n    /**\r\n     * Request an asset trustline creation.\r\n     * @param {Object} params - Intent parameters.\r\n     * @param {String} params.destination - Payment destination address.\r\n     * @param {String} params.amount - Amount to pay.\r\n     * @param {String} [params.asset_code] - [Optional] Asset code (if not set XLM is implied).\r\n     * @param {String} [params.asset_issuer] - [Optional] Asset issuer (if not set XLM is implied).\r\n     * @param {String} [params.memo] - [Optional] Memo to be included in the payment.\r\n     * @param {('MEMO_TEXT' | 'MEMO_ID' | 'MEMO_HASH' | 'MEMO_RETURN')} [params.memo_type] - [Optional] Memo type to be included in the payment.\r\n     * @param {String} [params.pubkey] - Specific public key requested by the application.\r\n     * @param {String} [params.network] - Stellar network identifier or private network passphrase.\r\n     * @param {Boolean} [params.submit] - If set, the signed transaction will be submitted to the Horizon server instead of returning it to the application.\r\n     * @returns {Promise<PayIntentResult>}\r\n     */\r\n    pay(params) {\r\n        return this.request('pay', params)\r\n    },\r\n\r\n    /**\r\n     * Request an asset trustline creation.\r\n     * @param {Object} params - Intent parameters.\r\n     * @param {String} params.asset_code - Asset code.\r\n     * @param {String} params.asset_issuer - Asset account issuer.\r\n     * @param {String} [params.limit] - [Optional] Trustline limit.\r\n     * @param {String} [params.pubkey] - Specific public key requested by the application.\r\n     * @param {String} [params.network] - Stellar network identifier or private network passphrase.\r\n     * @param {Boolean} [params.submit] - If set, the signed transaction will be submitted to the Horizon server instead of returning it to the application.\r\n     * @returns {Promise<TrustIntentResult>}\r\n     */\r\n    trust(params) {\r\n        return this.request('trust', params)\r\n    },\r\n\r\n    /**\r\n     * Request token exchange on Stellar DEX.\r\n     * @param {Object} params - Intent parameters.\r\n     * @param {String} params.destination - Payment destination address.\r\n     * @param {String} params.amount - Amount to pay.\r\n     * @param {String} params.max_price - Maximum price to pay.\r\n     * @param {String} [params.sell_asset_code] - [Optional] Selling asset code (if not set XLM is implied).\r\n     * @param {String} [params.sell_asset_issuer] - [Optional] Selling asset issuer (if not set XLM is implied).\r\n     * @param {String} [params.buy_asset_code] - [Optional] Selling asset code (if not set XLM is implied).\r\n     * @param {String} [params.buy_asset_issuer] - [Optional] Selling asset issuer (if not set XLM is implied).\r\n     * @return {Promise<ExchangeIntentResult>}\r\n     */\r\n    exchange(params) {\r\n        return this.request('exchange', params)\r\n    },\r\n\r\n    /**\r\n     * Request arbitrary data signing.\r\n     * @param {Object} params - Intent parameters.\r\n     * @param {String} params.message - Text message to sign.\r\n     * @param {String} [params.pubkey] - Specific public key requested by the application.\r\n     * @returns {Promise<SignMessageIntentResult>}\r\n     */\r\n    signMessage(params) {\r\n        params = Object.assign({}, params, {message: normalizeMessageToSign(params.message)})\r\n        return this.request('sign_message', params)\r\n    },\r\n\r\n    /**\r\n     * Open account settings window for a given account.\r\n     * @param {Object} params - Intent parameters.\r\n     * @param {String} params.pubkey - Specific public key requested by the application.\r\n     * @param {String} [params.network] - Stellar network identifier or private network passphrase.\r\n     * @returns {Promise<ManageAccountIntentResult>}\r\n     */\r\n    manageAccount(params) {\r\n        return this.request('manage_account', params)\r\n    },\r\n\r\n    /**\r\n     * Generate random token that can be used for authentication or encryption\r\n     * @return {String}\r\n     */\r\n    generateRandomToken() {\r\n        return (0,_random_token_generator__WEBPACK_IMPORTED_MODULE_0__.generateRandomToken)()\r\n    },\r\n\r\n    /**\r\n     * Check whether an implicit session exists for a given intent and pubkey.\r\n     * @param {String} intent\r\n     * @param {String} pubkey\r\n     * @return {boolean}\r\n     */\r\n    isImplicitSessionAllowed(intent, pubkey) {\r\n        return !!(0,_implicit_session_storage__WEBPACK_IMPORTED_MODULE_4__.getImplicitSession)(intent, pubkey)\r\n    },\r\n\r\n    /**\r\n     * Enumerate all currently active implicit sessions.\r\n     * @returns {Array<{pubkey: String, session: String, valid_until: Number, grants: Array<String>}>}\r\n     */\r\n    listImplicitSessions() {\r\n        return (0,_implicit_session_storage__WEBPACK_IMPORTED_MODULE_4__.getAllImplicitSessions)()\r\n    },\r\n\r\n    /**\r\n     * Revoke session permission granted for an account.\r\n     * @param {String} pubkey\r\n     */\r\n    forgetImplicitSession(pubkey) {\r\n        (0,_implicit_session_storage__WEBPACK_IMPORTED_MODULE_4__.forgetSession)(pubkey)\r\n    }\r\n}\r\n\r\n/**\r\n * Normalize a message before sending it to the signing endpoint.\r\n * @param {String} message - Message to normalize.\r\n * @returns {String}\r\n */\r\nfunction normalizeMessageToSign(message) {\r\n    switch (typeof message) {\r\n        case 'string':\r\n            return message\r\n        case 'undefined':\r\n            return ''\r\n    }\r\n    return JSON.stringify(message)\r\n}\r\n\r\nconst albedo = new AlbedoIntent()\r\nalbedo.default = albedo\r\n\r\n;(0,_web_stellar_handler__WEBPACK_IMPORTED_MODULE_5__.bindWebStellarLinkHandler)(albedo)\r\n\r\n\r\n\r\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (albedo);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@albedo-link/intent/src/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@albedo-link/intent/src/intent-dispatcher.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@albedo-link/intent/src/intent-dispatcher.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   requestIntentConfirmation: () => (/* binding */ requestIntentConfirmation)\n/* harmony export */ });\n/* harmony import */ var _intent_interface__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./intent-interface */ \"(ssr)/./node_modules/@albedo-link/intent/src/intent-interface.js\");\n/* harmony import */ var _intent_errors__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./intent-errors */ \"(ssr)/./node_modules/@albedo-link/intent/src/intent-errors.js\");\n/* harmony import */ var _transport_builder__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./transport-builder */ \"(ssr)/./node_modules/@albedo-link/intent/src/transport-builder.js\");\n/* harmony import */ var _implicit_session_storage__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./implicit-session-storage */ \"(ssr)/./node_modules/@albedo-link/intent/src/implicit-session-storage.js\");\n\r\n\r\n\r\n\r\n\r\nfunction intentError(msg) {\r\n    return Object.assign(new Error(), _intent_errors__WEBPACK_IMPORTED_MODULE_1__[\"default\"].invalidIntentRequest, {ext: msg})\r\n}\r\n\r\n/**\r\n * Request user's confirmation for the specified action.\r\n * @param {Object} params - Intent parameters.\r\n * @param {String} frontendUrl - URL of the Albedo frontend.\r\n * @return {Promise}\r\n */\r\nfunction requestIntentConfirmation(params, frontendUrl) {\r\n    try {\r\n        const {intent} = params\r\n        //intent should be present\r\n        if (!intent)\r\n            throw intentError('Parameter \"intent\" is required.')\r\n        const intentDescriptor = _intent_interface__WEBPACK_IMPORTED_MODULE_0__[\"default\"][intent]\r\n        //check interface compliance\r\n        if (!intentDescriptor)\r\n            throw intentError(`Unknown intent: \"${intent}\".`)\r\n        //build request data\r\n        const requestParams = prepareRequestParams(intentDescriptor, params)\r\n        //create transport and dispatch request\r\n        return prepareTransport(requestParams, frontendUrl)\r\n            //dispatch intent request\r\n            .then(transport => sendRequest(requestParams, transport))\r\n    } catch (e) {\r\n        const {code = -1, message, ext} = e,\r\n            res = {message, code}\r\n        if (ext) {\r\n            res.ext = ext\r\n        }\r\n        return Promise.reject(res)\r\n    }\r\n}\r\n\r\n/**\r\n * Create/retrieve an appropriate window transport for given intent params.\r\n * @param {Object} params - Intent params provided by the third-party app.\r\n * @param {String} frontendUrl - URL of the Albedo website.\r\n * @return {TransportHandler}\r\n */\r\nfunction prepareTransport(params, frontendUrl) {\r\n    //check if intent supports implicit flow and the permission was granted to the app\r\n    if (params.pubkey) {\r\n        const session = (0,_implicit_session_storage__WEBPACK_IMPORTED_MODULE_3__.getImplicitSession)(params.intent, params.pubkey)\r\n        if (session) {\r\n            params.session = session.key\r\n            //implicit session can be executed without a dialog window\r\n            return (0,_transport_builder__WEBPACK_IMPORTED_MODULE_2__.createIframeTransport)(frontendUrl)\r\n        }\r\n    }\r\n    //create iframe transport in advance if the implicit flow has been requested\r\n    setTimeout(() => {\r\n        if (params.intent === 'implicit_flow') {\r\n            (0,_transport_builder__WEBPACK_IMPORTED_MODULE_2__.createIframeTransport)(frontendUrl)\r\n        }\r\n    }, 200)\r\n    //create dialog window transport if only interactive authorization flow is available\r\n    return (0,_transport_builder__WEBPACK_IMPORTED_MODULE_2__.createDialogTransport)(frontendUrl)\r\n}\r\n\r\n/**\r\n * Send confirmation request for a specific intent using a suitable transport.\r\n * @param {Object} params - Intent params provided by the third-party app.\r\n * @param {TransportHandler} transport - PostMessage transport window handler.\r\n * @return {Promise<Object>}\r\n */\r\nfunction sendRequest(params, transport) {\r\n    return transport.postMessage(params)\r\n        .then(result => {\r\n            //handle implicit session grant response if any\r\n            if (result.intent === 'implicit_flow' && result.granted) {\r\n                //save implicit session to the internal session storage\r\n                (0,_implicit_session_storage__WEBPACK_IMPORTED_MODULE_3__.saveImplicitSession)(result)\r\n            }\r\n            return result\r\n        })\r\n}\r\n\r\n/**\r\n * Pre-process request params provided by the third-party app.\r\n * @param {Object} intentDescriptor - Requested intent descriptor - contains the list of available params.\r\n * @param {Object} params - Intent params provided by the third-party app.\r\n * @return {Object}\r\n */\r\nfunction prepareRequestParams(intentDescriptor, params) {\r\n    //validate parameters\r\n    if (typeof params !== 'object')\r\n        throw intentError('Intent parameters expected.')\r\n    const {intent, pubkey} = params,\r\n        requestParams = {intent}\r\n    //basic account public key validation\r\n    if (pubkey && !/^G[0-9A-Z]{55}$/.test(pubkey))\r\n        throw intentError('Invalid \"pubkey\" parameter. Stellar account public key expected.')\r\n    //check required params\r\n    for (const key in intentDescriptor.params) {\r\n        const props = intentDescriptor.params[key],\r\n            value = params[key]\r\n        if (value) {\r\n            requestParams[key] = value\r\n        } else if (props.required) {\r\n            throw intentError(`Parameter \"${key}\" is required for intent \"${intent}\".`)\r\n        }\r\n    }\r\n    return requestParams\r\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFsYmVkby1saW5rL2ludGVudC9zcmMvaW50ZW50LWRpc3BhdGNoZXIuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBZ0Q7QUFDTjtBQUNzQztBQUNFO0FBQ2xGO0FBQ0E7QUFDQSxzQ0FBc0Msc0RBQVksd0JBQXdCLFNBQVM7QUFDbkY7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkIsV0FBVyxRQUFRO0FBQ25CLFlBQVk7QUFDWjtBQUNPO0FBQ1A7QUFDQSxlQUFlLFFBQVE7QUFDdkI7QUFDQTtBQUNBO0FBQ0EsaUNBQWlDLHlEQUFlO0FBQ2hEO0FBQ0E7QUFDQSxrREFBa0QsT0FBTztBQUN6RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ04sZUFBZSx5QkFBeUI7QUFDeEMsbUJBQW1CO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixXQUFXLFFBQVE7QUFDbkIsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLDZFQUFrQjtBQUMxQztBQUNBO0FBQ0E7QUFDQSxtQkFBbUIseUVBQXFCO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLHlFQUFxQjtBQUNqQztBQUNBLEtBQUs7QUFDTDtBQUNBLFdBQVcseUVBQXFCO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLFdBQVcsa0JBQWtCO0FBQzdCLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQiw4RUFBbUI7QUFDbkM7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixXQUFXLFFBQVE7QUFDbkIsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLGdCQUFnQjtBQUMzQix5QkFBeUI7QUFDekI7QUFDQSwrQkFBK0IsR0FBRztBQUNsQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDViw0Q0FBNEMsSUFBSSw0QkFBNEIsT0FBTztBQUNuRjtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2ludmVudG9yeS1tYW5hZ2VyLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzL0BhbGJlZG8tbGluay9pbnRlbnQvc3JjL2ludGVudC1kaXNwYXRjaGVyLmpzP2Q2YmMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGludGVudEludGVyZmFjZSBmcm9tICcuL2ludGVudC1pbnRlcmZhY2UnXHJcbmltcG9ydCBpbnRlbnRFcnJvcnMgZnJvbSAnLi9pbnRlbnQtZXJyb3JzJ1xyXG5pbXBvcnQge2NyZWF0ZURpYWxvZ1RyYW5zcG9ydCwgY3JlYXRlSWZyYW1lVHJhbnNwb3J0fSBmcm9tICcuL3RyYW5zcG9ydC1idWlsZGVyJ1xyXG5pbXBvcnQge2dldEltcGxpY2l0U2Vzc2lvbiwgc2F2ZUltcGxpY2l0U2Vzc2lvbn0gZnJvbSAnLi9pbXBsaWNpdC1zZXNzaW9uLXN0b3JhZ2UnXHJcblxyXG5mdW5jdGlvbiBpbnRlbnRFcnJvcihtc2cpIHtcclxuICAgIHJldHVybiBPYmplY3QuYXNzaWduKG5ldyBFcnJvcigpLCBpbnRlbnRFcnJvcnMuaW52YWxpZEludGVudFJlcXVlc3QsIHtleHQ6IG1zZ30pXHJcbn1cclxuXHJcbi8qKlxyXG4gKiBSZXF1ZXN0IHVzZXIncyBjb25maXJtYXRpb24gZm9yIHRoZSBzcGVjaWZpZWQgYWN0aW9uLlxyXG4gKiBAcGFyYW0ge09iamVjdH0gcGFyYW1zIC0gSW50ZW50IHBhcmFtZXRlcnMuXHJcbiAqIEBwYXJhbSB7U3RyaW5nfSBmcm9udGVuZFVybCAtIFVSTCBvZiB0aGUgQWxiZWRvIGZyb250ZW5kLlxyXG4gKiBAcmV0dXJuIHtQcm9taXNlfVxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHJlcXVlc3RJbnRlbnRDb25maXJtYXRpb24ocGFyYW1zLCBmcm9udGVuZFVybCkge1xyXG4gICAgdHJ5IHtcclxuICAgICAgICBjb25zdCB7aW50ZW50fSA9IHBhcmFtc1xyXG4gICAgICAgIC8vaW50ZW50IHNob3VsZCBiZSBwcmVzZW50XHJcbiAgICAgICAgaWYgKCFpbnRlbnQpXHJcbiAgICAgICAgICAgIHRocm93IGludGVudEVycm9yKCdQYXJhbWV0ZXIgXCJpbnRlbnRcIiBpcyByZXF1aXJlZC4nKVxyXG4gICAgICAgIGNvbnN0IGludGVudERlc2NyaXB0b3IgPSBpbnRlbnRJbnRlcmZhY2VbaW50ZW50XVxyXG4gICAgICAgIC8vY2hlY2sgaW50ZXJmYWNlIGNvbXBsaWFuY2VcclxuICAgICAgICBpZiAoIWludGVudERlc2NyaXB0b3IpXHJcbiAgICAgICAgICAgIHRocm93IGludGVudEVycm9yKGBVbmtub3duIGludGVudDogXCIke2ludGVudH1cIi5gKVxyXG4gICAgICAgIC8vYnVpbGQgcmVxdWVzdCBkYXRhXHJcbiAgICAgICAgY29uc3QgcmVxdWVzdFBhcmFtcyA9IHByZXBhcmVSZXF1ZXN0UGFyYW1zKGludGVudERlc2NyaXB0b3IsIHBhcmFtcylcclxuICAgICAgICAvL2NyZWF0ZSB0cmFuc3BvcnQgYW5kIGRpc3BhdGNoIHJlcXVlc3RcclxuICAgICAgICByZXR1cm4gcHJlcGFyZVRyYW5zcG9ydChyZXF1ZXN0UGFyYW1zLCBmcm9udGVuZFVybClcclxuICAgICAgICAgICAgLy9kaXNwYXRjaCBpbnRlbnQgcmVxdWVzdFxyXG4gICAgICAgICAgICAudGhlbih0cmFuc3BvcnQgPT4gc2VuZFJlcXVlc3QocmVxdWVzdFBhcmFtcywgdHJhbnNwb3J0KSlcclxuICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgICBjb25zdCB7Y29kZSA9IC0xLCBtZXNzYWdlLCBleHR9ID0gZSxcclxuICAgICAgICAgICAgcmVzID0ge21lc3NhZ2UsIGNvZGV9XHJcbiAgICAgICAgaWYgKGV4dCkge1xyXG4gICAgICAgICAgICByZXMuZXh0ID0gZXh0XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChyZXMpXHJcbiAgICB9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBDcmVhdGUvcmV0cmlldmUgYW4gYXBwcm9wcmlhdGUgd2luZG93IHRyYW5zcG9ydCBmb3IgZ2l2ZW4gaW50ZW50IHBhcmFtcy5cclxuICogQHBhcmFtIHtPYmplY3R9IHBhcmFtcyAtIEludGVudCBwYXJhbXMgcHJvdmlkZWQgYnkgdGhlIHRoaXJkLXBhcnR5IGFwcC5cclxuICogQHBhcmFtIHtTdHJpbmd9IGZyb250ZW5kVXJsIC0gVVJMIG9mIHRoZSBBbGJlZG8gd2Vic2l0ZS5cclxuICogQHJldHVybiB7VHJhbnNwb3J0SGFuZGxlcn1cclxuICovXHJcbmZ1bmN0aW9uIHByZXBhcmVUcmFuc3BvcnQocGFyYW1zLCBmcm9udGVuZFVybCkge1xyXG4gICAgLy9jaGVjayBpZiBpbnRlbnQgc3VwcG9ydHMgaW1wbGljaXQgZmxvdyBhbmQgdGhlIHBlcm1pc3Npb24gd2FzIGdyYW50ZWQgdG8gdGhlIGFwcFxyXG4gICAgaWYgKHBhcmFtcy5wdWJrZXkpIHtcclxuICAgICAgICBjb25zdCBzZXNzaW9uID0gZ2V0SW1wbGljaXRTZXNzaW9uKHBhcmFtcy5pbnRlbnQsIHBhcmFtcy5wdWJrZXkpXHJcbiAgICAgICAgaWYgKHNlc3Npb24pIHtcclxuICAgICAgICAgICAgcGFyYW1zLnNlc3Npb24gPSBzZXNzaW9uLmtleVxyXG4gICAgICAgICAgICAvL2ltcGxpY2l0IHNlc3Npb24gY2FuIGJlIGV4ZWN1dGVkIHdpdGhvdXQgYSBkaWFsb2cgd2luZG93XHJcbiAgICAgICAgICAgIHJldHVybiBjcmVhdGVJZnJhbWVUcmFuc3BvcnQoZnJvbnRlbmRVcmwpXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLy9jcmVhdGUgaWZyYW1lIHRyYW5zcG9ydCBpbiBhZHZhbmNlIGlmIHRoZSBpbXBsaWNpdCBmbG93IGhhcyBiZWVuIHJlcXVlc3RlZFxyXG4gICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgaWYgKHBhcmFtcy5pbnRlbnQgPT09ICdpbXBsaWNpdF9mbG93Jykge1xyXG4gICAgICAgICAgICBjcmVhdGVJZnJhbWVUcmFuc3BvcnQoZnJvbnRlbmRVcmwpXHJcbiAgICAgICAgfVxyXG4gICAgfSwgMjAwKVxyXG4gICAgLy9jcmVhdGUgZGlhbG9nIHdpbmRvdyB0cmFuc3BvcnQgaWYgb25seSBpbnRlcmFjdGl2ZSBhdXRob3JpemF0aW9uIGZsb3cgaXMgYXZhaWxhYmxlXHJcbiAgICByZXR1cm4gY3JlYXRlRGlhbG9nVHJhbnNwb3J0KGZyb250ZW5kVXJsKVxyXG59XHJcblxyXG4vKipcclxuICogU2VuZCBjb25maXJtYXRpb24gcmVxdWVzdCBmb3IgYSBzcGVjaWZpYyBpbnRlbnQgdXNpbmcgYSBzdWl0YWJsZSB0cmFuc3BvcnQuXHJcbiAqIEBwYXJhbSB7T2JqZWN0fSBwYXJhbXMgLSBJbnRlbnQgcGFyYW1zIHByb3ZpZGVkIGJ5IHRoZSB0aGlyZC1wYXJ0eSBhcHAuXHJcbiAqIEBwYXJhbSB7VHJhbnNwb3J0SGFuZGxlcn0gdHJhbnNwb3J0IC0gUG9zdE1lc3NhZ2UgdHJhbnNwb3J0IHdpbmRvdyBoYW5kbGVyLlxyXG4gKiBAcmV0dXJuIHtQcm9taXNlPE9iamVjdD59XHJcbiAqL1xyXG5mdW5jdGlvbiBzZW5kUmVxdWVzdChwYXJhbXMsIHRyYW5zcG9ydCkge1xyXG4gICAgcmV0dXJuIHRyYW5zcG9ydC5wb3N0TWVzc2FnZShwYXJhbXMpXHJcbiAgICAgICAgLnRoZW4ocmVzdWx0ID0+IHtcclxuICAgICAgICAgICAgLy9oYW5kbGUgaW1wbGljaXQgc2Vzc2lvbiBncmFudCByZXNwb25zZSBpZiBhbnlcclxuICAgICAgICAgICAgaWYgKHJlc3VsdC5pbnRlbnQgPT09ICdpbXBsaWNpdF9mbG93JyAmJiByZXN1bHQuZ3JhbnRlZCkge1xyXG4gICAgICAgICAgICAgICAgLy9zYXZlIGltcGxpY2l0IHNlc3Npb24gdG8gdGhlIGludGVybmFsIHNlc3Npb24gc3RvcmFnZVxyXG4gICAgICAgICAgICAgICAgc2F2ZUltcGxpY2l0U2Vzc2lvbihyZXN1bHQpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdFxyXG4gICAgICAgIH0pXHJcbn1cclxuXHJcbi8qKlxyXG4gKiBQcmUtcHJvY2VzcyByZXF1ZXN0IHBhcmFtcyBwcm92aWRlZCBieSB0aGUgdGhpcmQtcGFydHkgYXBwLlxyXG4gKiBAcGFyYW0ge09iamVjdH0gaW50ZW50RGVzY3JpcHRvciAtIFJlcXVlc3RlZCBpbnRlbnQgZGVzY3JpcHRvciAtIGNvbnRhaW5zIHRoZSBsaXN0IG9mIGF2YWlsYWJsZSBwYXJhbXMuXHJcbiAqIEBwYXJhbSB7T2JqZWN0fSBwYXJhbXMgLSBJbnRlbnQgcGFyYW1zIHByb3ZpZGVkIGJ5IHRoZSB0aGlyZC1wYXJ0eSBhcHAuXHJcbiAqIEByZXR1cm4ge09iamVjdH1cclxuICovXHJcbmZ1bmN0aW9uIHByZXBhcmVSZXF1ZXN0UGFyYW1zKGludGVudERlc2NyaXB0b3IsIHBhcmFtcykge1xyXG4gICAgLy92YWxpZGF0ZSBwYXJhbWV0ZXJzXHJcbiAgICBpZiAodHlwZW9mIHBhcmFtcyAhPT0gJ29iamVjdCcpXHJcbiAgICAgICAgdGhyb3cgaW50ZW50RXJyb3IoJ0ludGVudCBwYXJhbWV0ZXJzIGV4cGVjdGVkLicpXHJcbiAgICBjb25zdCB7aW50ZW50LCBwdWJrZXl9ID0gcGFyYW1zLFxyXG4gICAgICAgIHJlcXVlc3RQYXJhbXMgPSB7aW50ZW50fVxyXG4gICAgLy9iYXNpYyBhY2NvdW50IHB1YmxpYyBrZXkgdmFsaWRhdGlvblxyXG4gICAgaWYgKHB1YmtleSAmJiAhL15HWzAtOUEtWl17NTV9JC8udGVzdChwdWJrZXkpKVxyXG4gICAgICAgIHRocm93IGludGVudEVycm9yKCdJbnZhbGlkIFwicHVia2V5XCIgcGFyYW1ldGVyLiBTdGVsbGFyIGFjY291bnQgcHVibGljIGtleSBleHBlY3RlZC4nKVxyXG4gICAgLy9jaGVjayByZXF1aXJlZCBwYXJhbXNcclxuICAgIGZvciAoY29uc3Qga2V5IGluIGludGVudERlc2NyaXB0b3IucGFyYW1zKSB7XHJcbiAgICAgICAgY29uc3QgcHJvcHMgPSBpbnRlbnREZXNjcmlwdG9yLnBhcmFtc1trZXldLFxyXG4gICAgICAgICAgICB2YWx1ZSA9IHBhcmFtc1trZXldXHJcbiAgICAgICAgaWYgKHZhbHVlKSB7XHJcbiAgICAgICAgICAgIHJlcXVlc3RQYXJhbXNba2V5XSA9IHZhbHVlXHJcbiAgICAgICAgfSBlbHNlIGlmIChwcm9wcy5yZXF1aXJlZCkge1xyXG4gICAgICAgICAgICB0aHJvdyBpbnRlbnRFcnJvcihgUGFyYW1ldGVyIFwiJHtrZXl9XCIgaXMgcmVxdWlyZWQgZm9yIGludGVudCBcIiR7aW50ZW50fVwiLmApXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHJlcXVlc3RQYXJhbXNcclxufSJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@albedo-link/intent/src/intent-dispatcher.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@albedo-link/intent/src/intent-errors.js":
/*!***************************************************************!*\
  !*** ./node_modules/@albedo-link/intent/src/intent-errors.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nconst intentErrors = {\r\n    unhandledError: {\r\n        message: 'Unhandled error occurred. If this error persists, please contact Albedo support.',\r\n        code: -1\r\n    },\r\n    externalError: {\r\n        message: 'External error occurred.',\r\n        code: -2\r\n    },\r\n    invalidIntentRequest: {\r\n        message: 'Intent request is invalid.',\r\n        code: -3\r\n    },\r\n    actionRejectedByUser: {\r\n        message: 'Action request was rejected by the user.',\r\n        code: -4\r\n    },\r\n    horizonError: {\r\n        message: 'Transaction failed when submitted to Stellar network.',\r\n        code: -5\r\n    },\r\n    callbackError: {\r\n        message: 'Callback redirect failed.',\r\n        code: -6\r\n    }\r\n}\r\n\r\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (intentErrors);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFsYmVkby1saW5rL2ludGVudC9zcmMvaW50ZW50LWVycm9ycy5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlFQUFlIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaW52ZW50b3J5LW1hbmFnZXItZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvQGFsYmVkby1saW5rL2ludGVudC9zcmMvaW50ZW50LWVycm9ycy5qcz80NGRkIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGludGVudEVycm9ycyA9IHtcclxuICAgIHVuaGFuZGxlZEVycm9yOiB7XHJcbiAgICAgICAgbWVzc2FnZTogJ1VuaGFuZGxlZCBlcnJvciBvY2N1cnJlZC4gSWYgdGhpcyBlcnJvciBwZXJzaXN0cywgcGxlYXNlIGNvbnRhY3QgQWxiZWRvIHN1cHBvcnQuJyxcclxuICAgICAgICBjb2RlOiAtMVxyXG4gICAgfSxcclxuICAgIGV4dGVybmFsRXJyb3I6IHtcclxuICAgICAgICBtZXNzYWdlOiAnRXh0ZXJuYWwgZXJyb3Igb2NjdXJyZWQuJyxcclxuICAgICAgICBjb2RlOiAtMlxyXG4gICAgfSxcclxuICAgIGludmFsaWRJbnRlbnRSZXF1ZXN0OiB7XHJcbiAgICAgICAgbWVzc2FnZTogJ0ludGVudCByZXF1ZXN0IGlzIGludmFsaWQuJyxcclxuICAgICAgICBjb2RlOiAtM1xyXG4gICAgfSxcclxuICAgIGFjdGlvblJlamVjdGVkQnlVc2VyOiB7XHJcbiAgICAgICAgbWVzc2FnZTogJ0FjdGlvbiByZXF1ZXN0IHdhcyByZWplY3RlZCBieSB0aGUgdXNlci4nLFxyXG4gICAgICAgIGNvZGU6IC00XHJcbiAgICB9LFxyXG4gICAgaG9yaXpvbkVycm9yOiB7XHJcbiAgICAgICAgbWVzc2FnZTogJ1RyYW5zYWN0aW9uIGZhaWxlZCB3aGVuIHN1Ym1pdHRlZCB0byBTdGVsbGFyIG5ldHdvcmsuJyxcclxuICAgICAgICBjb2RlOiAtNVxyXG4gICAgfSxcclxuICAgIGNhbGxiYWNrRXJyb3I6IHtcclxuICAgICAgICBtZXNzYWdlOiAnQ2FsbGJhY2sgcmVkaXJlY3QgZmFpbGVkLicsXHJcbiAgICAgICAgY29kZTogLTZcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgaW50ZW50RXJyb3JzIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@albedo-link/intent/src/intent-errors.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@albedo-link/intent/src/intent-interface.js":
/*!******************************************************************!*\
  !*** ./node_modules/@albedo-link/intent/src/intent-interface.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nconst intentInterface = {\r\n    public_key: {\r\n        title: 'View public key',\r\n        description: 'Requests account public key. It\\'s a simple way of authentication for Stellar-based applications. The response ensures that a user owns the corresponding secret key.',\r\n        implicitFlow: false,\r\n        params: {\r\n            token: {\r\n                description: 'Verification token generated by the application (should be unique or random).',\r\n                type: 'string',\r\n                required: false\r\n            },\r\n            callback: {\r\n                description: 'Optional URL callback where Albedo will POST a signed token and public key.',\r\n                type: 'string',\r\n                required: false\r\n            },\r\n            require_existing: {\r\n                description: 'Allow existing Albedo accounts only.',\r\n                type: 'boolean',\r\n                required: false\r\n            }\r\n        },\r\n        returns: {\r\n            pubkey: {\r\n                description: 'User-selected public key.',\r\n                type: 'string'\r\n            },\r\n            signed_message: {\r\n                description: 'HEX-encoded authentication message derived from the public key and verification token.',\r\n                type: 'string'\r\n            },\r\n            signature: {\r\n                description: 'HEX-encoded ED25519 signature of the authentication message that can be further used to verify user\\'s keypair ownership.',\r\n                type: 'string'\r\n            }\r\n        }\r\n    },\r\n    sign_message: {\r\n        title: 'Sign text message',\r\n        description: 'Requests arbitrary message signing. Can be used to implement identity/ownership verification.',\r\n        implicitFlow: true,\r\n        params: {\r\n            message: {\r\n                description: 'Text message to sign.',\r\n                type: 'string',\r\n                required: true\r\n            },\r\n            pubkey: {\r\n                description: 'Specific public key requested by the application.',\r\n                type: 'string',\r\n                required: false\r\n            },\r\n            callback: {\r\n                description: 'Optional URL callback where Albedo will POST a signed message.',\r\n                type: 'string',\r\n                required: false\r\n            }\r\n        },\r\n        returns: {\r\n            pubkey: {\r\n                description: 'User-selected public key.',\r\n                type: 'string'\r\n            },\r\n            original_message: {\r\n                description: 'Text message to sign from request.',\r\n                type: 'string'\r\n            },\r\n            signed_message: {\r\n                description: 'HEX-encoded message derived from the public key and original message.',\r\n                type: 'string'\r\n            },\r\n            message_signature: {\r\n                description: 'HEX-encoded ED25519 signature of the signed message.',\r\n                type: 'string'\r\n            }\r\n        }\r\n    },\r\n    tx: {\r\n        title: 'Sign transaction',\r\n        description: 'Requests a signature for the transaction. Returns the signed transaction envelope that can be submitted to the network or used for multi-sig coordination.',\r\n        implicitFlow: true,\r\n        params: {\r\n            xdr: {\r\n                description: 'XDR-encoded transaction envelope to sign.',\r\n                type: 'string',\r\n                required: true\r\n            },\r\n            pubkey: {\r\n                description: 'Specific public key requested by the application.',\r\n                type: 'string',\r\n                required: false\r\n            },\r\n            network: {\r\n                description: 'Stellar network identifier.',\r\n                type: 'string',\r\n                required: false\r\n            },\r\n            callback: {\r\n                description: 'Optional URL callback where Albedo will POST the signed transaction XDR instead of submitting it to Horizon.',\r\n                type: 'string',\r\n                required: false\r\n            },\r\n            description: {\r\n                description: 'Optional human-friendly short transaction description provided by developers.',\r\n                type: 'string',\r\n                required: false\r\n            },\r\n            submit: {\r\n                description: 'If set, the signed transaction will be submitted to the Horizon server instead of returning it to the application.',\r\n                type: 'boolean',\r\n                required: false\r\n            }\r\n        },\r\n        returns: {\r\n            xdr: {\r\n                description: 'XDR-encoded transaction envelope from request.',\r\n                type: 'string'\r\n            },\r\n            tx_hash: {\r\n                description: 'HEX-encoded transaction hash.',\r\n                type: 'string'\r\n            },\r\n            signed_envelope_xdr: {\r\n                description: 'XDR-encoded transaction envelope with new signatures.',\r\n                type: 'string'\r\n            },\r\n            network: {\r\n                description: 'Stellar network identifier.',\r\n                type: 'string'\r\n            },\r\n            result: {\r\n                description: 'Optional response from Horizon if the transaction has been submitted automatically.',\r\n                type: 'object'\r\n            }\r\n        }\r\n    },\r\n    pay: {\r\n        title: 'Make payment',\r\n        description: 'Requests a payment from a user. Works with any Stellar asset, supports transaction memo.',\r\n        implicitFlow: true,\r\n        params: {\r\n            amount: {\r\n                description: 'Requested payment amount.',\r\n                type: 'string',\r\n                required: true\r\n            },\r\n            destination: {\r\n                description: 'Payment destination address.',\r\n                type: 'string',\r\n                required: true\r\n            },\r\n            asset_code: {\r\n                description: 'Asset code (skip for XLM).',\r\n                type: 'string',\r\n                required: false\r\n            },\r\n            asset_issuer: {\r\n                description: 'Asset issuer (skip for XLM).',\r\n                type: 'string',\r\n                required: false\r\n            },\r\n            memo: {\r\n                description: 'Transaction memo (required for exchanges and some anchors).',\r\n                type: 'string',\r\n                required: false\r\n            },\r\n            memo_type: {\r\n                description: 'Transaction memo type.',\r\n                type: 'string',\r\n                required: false\r\n            },\r\n            pubkey: {\r\n                description: 'Specific public key requested by the application.',\r\n                type: 'string',\r\n                required: false\r\n            },\r\n            network: {\r\n                description: 'Stellar network identifier or private network passphrase.',\r\n                type: 'string',\r\n                required: false\r\n            },\r\n            callback: {\r\n                description: 'Optional URL callback where Albedo will POST the signed transaction XDR instead of submitting it to Horizon. ',\r\n                type: 'string',\r\n                required: false\r\n            },\r\n            submit: {\r\n                description: 'If set, the signed transaction will be submitted to the Horizon server instead of returning it to the application.',\r\n                type: 'boolean',\r\n                required: false\r\n            }\r\n        },\r\n        returns: {\r\n            amount: {\r\n                description: 'Payment amount from request.',\r\n                type: 'string'\r\n            },\r\n            destination: {\r\n                description: 'Payment destination address from request.',\r\n                type: 'string'\r\n            },\r\n            asset_code: {\r\n                description: 'Asset code from request.',\r\n                type: 'string'\r\n            },\r\n            asset_issuer: {\r\n                description: 'Asset issuer from request.',\r\n                type: 'string'\r\n            },\r\n            memo: {\r\n                description: 'Transaction memo from request.',\r\n                type: 'string'\r\n            },\r\n            memo_type: {\r\n                description: 'Transaction memo type from request.',\r\n                type: 'string'\r\n            },\r\n            tx_hash: {\r\n                description: 'HEX-encoded transaction hash.',\r\n                type: 'string'\r\n            },\r\n            signed_envelope_xdr: {\r\n                description: 'XDR-encoded transaction envelope with new signatures.',\r\n                type: 'string'\r\n            },\r\n            pubkey: {\r\n                description: 'User-selected public key.',\r\n                type: 'string'\r\n            },\r\n            network: {\r\n                description: 'Stellar network identifier.',\r\n                type: 'string'\r\n            },\r\n            result: {\r\n                description: 'Optional response from Horizon if the transaction has been submitted automatically.',\r\n                type: 'object'\r\n            }\r\n        }\r\n    },\r\n    trust: {\r\n        title: 'Establish trustline',\r\n        description: 'Requests permission to create a trustline to a given Stellar asset. Gradually simplifies the process of creating trustlines for anchors, ICOs, and airdrops.',\r\n        implicitFlow: true,\r\n        params: {\r\n            asset_code: {\r\n                description: 'Trustline asset code.',\r\n                type: 'string',\r\n                required: true\r\n            },\r\n            asset_issuer: {\r\n                description: 'Trustline asset issuer address.',\r\n                type: 'string',\r\n                required: true\r\n            },\r\n            limit: {\r\n                description: 'Trust limit.',\r\n                type: 'string',\r\n                required: false\r\n            },\r\n            memo: {\r\n                description: 'Transaction memo (required for exchanges and some anchors).',\r\n                type: 'string',\r\n                required: false\r\n            },\r\n            memo_type: {\r\n                description: 'Transaction memo type.',\r\n                type: 'string',\r\n                required: false\r\n            },\r\n            pubkey: {\r\n                description: 'Specific public key requested by the application.',\r\n                type: 'string',\r\n                required: false\r\n            },\r\n            network: {\r\n                description: 'Stellar network identifier or private network passphrase.',\r\n                type: 'string',\r\n                required: false\r\n            },\r\n            callback: {\r\n                description: 'Optional URL callback where Albedo will POST the signed transaction XDR instead of submitting it to Horizon. ',\r\n                type: 'string',\r\n                required: false\r\n            },\r\n            submit: {\r\n                description: 'If set, the signed transaction will be submitted to the Horizon server instead of returning it to the application.',\r\n                type: 'boolean',\r\n                required: false\r\n            }\r\n        },\r\n        returns: {\r\n            asset_code: {\r\n                description: 'Trustline asset code from request.',\r\n                type: 'string'\r\n            },\r\n            asset_issuer: {\r\n                description: 'Trustline asset issuer address from request.',\r\n                type: 'string'\r\n            },\r\n            limit: {\r\n                description: 'Trust limit from request.',\r\n                type: 'string'\r\n            },\r\n            tx_hash: {\r\n                description: 'HEX-encoded transaction hash.',\r\n                type: 'string'\r\n            },\r\n            signed_envelope_xdr: {\r\n                description: 'XDR-encoded transaction envelope with new signatures.',\r\n                type: 'string'\r\n            },\r\n            pubkey: {\r\n                description: 'User-selected public key.',\r\n                type: 'string'\r\n            },\r\n            network: {\r\n                description: 'Stellar network identifier.',\r\n                type: 'string'\r\n            },\r\n            result: {\r\n                description: 'Optional response from Horizon if the transaction has been submitted automatically.',\r\n                type: 'object'\r\n            }\r\n        }\r\n    },\r\n    exchange: {\r\n        title: 'Swap tokens',\r\n        description: 'Requests permission to buy tokens on Stellar DEX at market price.',\r\n        implicitFlow: false,\r\n        params: {\r\n            amount: {\r\n                description: 'The amount of asset to buy.',\r\n                type: 'string',\r\n                required: true\r\n            },\r\n            max_price: {\r\n                description: 'Maximum price the user willing to pay.',\r\n                type: 'string',\r\n                required: true\r\n            },\r\n            sell_asset_code: {\r\n                description: 'Asset code of the asset to sell.',\r\n                type: 'string',\r\n                required: false\r\n            },\r\n            sell_asset_issuer: {\r\n                description: 'Issuer account of the asset to sell.',\r\n                type: 'string',\r\n                required: false\r\n            },\r\n            buy_asset_code: {\r\n                description: 'Asset code of the asset to buy.',\r\n                type: 'string',\r\n                required: false\r\n            },\r\n            buy_asset_issuer: {\r\n                description: 'Issuer account of the asset to buy.',\r\n                type: 'string',\r\n                required: false\r\n            },\r\n            memo: {\r\n                description: 'Transaction memo (required for exchanges and some anchors).',\r\n                type: 'string',\r\n                required: false\r\n            },\r\n            memo_type: {\r\n                description: 'Transaction memo type.',\r\n                type: 'string',\r\n                required: false\r\n            },\r\n            pubkey: {\r\n                description: 'Specific public key requested by the application.',\r\n                type: 'string',\r\n                required: false\r\n            },\r\n            network: {\r\n                description: 'Stellar network identifier or private network passphrase.',\r\n                type: 'string',\r\n                required: false\r\n            },\r\n            callback: {\r\n                description: 'Optional URL callback where Albedo will POST the signed transaction XDR instead of submitting it to Horizon.',\r\n                type: 'string',\r\n                required: false\r\n            },\r\n            submit: {\r\n                description: 'If set, the signed transaction will be submitted to the Horizon server instead of returning it to the application.',\r\n                type: 'boolean',\r\n                required: false\r\n            }\r\n        },\r\n        returns: {\r\n            amount: {\r\n                description: 'The amount of asset to buy from request.',\r\n                type: 'string'\r\n            },\r\n            max_price: {\r\n                description: 'Maximum price the user willing to pay from request.',\r\n                type: 'string'\r\n            },\r\n            sell_asset_code: {\r\n                description: 'Asset code of the asset to sell from request.',\r\n                type: 'string'\r\n            },\r\n            sell_asset_issuer: {\r\n                description: 'Issuer account of the asset to sell from request.',\r\n                type: 'string'\r\n            },\r\n            buy_asset_code: {\r\n                description: 'Asset code of the asset to buy from request.',\r\n                type: 'string'\r\n            },\r\n            buy_asset_issuer: {\r\n                description: 'Issuer account of the asset to buy from request.',\r\n                type: 'string'\r\n            },\r\n            tx_hash: {\r\n                description: 'HEX-encoded transaction hash.',\r\n                type: 'string'\r\n            },\r\n            signed_envelope_xdr: {\r\n                description: 'XDR-encoded transaction envelope with new signatures.',\r\n                type: 'string'\r\n            },\r\n            pubkey: {\r\n                description: 'User-selected public key.',\r\n                type: 'string'\r\n            },\r\n            network: {\r\n                description: 'Stellar network identifier.',\r\n                type: 'string'\r\n            },\r\n            result: {\r\n                description: 'Optional response from Horizon if the transaction has been submitted automatically.',\r\n                type: 'object'\r\n            }\r\n        }\r\n    },\r\n    implicit_flow: {\r\n        title: 'Implicit permissions',\r\n        description: 'Requests temporary access token for one or more intents that can be used to execute actions without explicit confirmation from the user. In order to be executed implicitly, an implicit flow permissions for a given intent should be granted and \"pubkey\" parameter set.',\r\n        implicitFlow: false,\r\n        params: {\r\n            intents: {\r\n                description: 'Requested implicit flow intents.',\r\n                type: 'string|string[]',\r\n                required: true\r\n            },\r\n            network: {\r\n                description: 'Stellar network identifier or private network passphrase.',\r\n                type: 'string',\r\n                required: false\r\n            }\r\n        },\r\n        returns: {\r\n            granted: {\r\n                description: 'Whether a user granted permissions or not.',\r\n                type: 'boolean'\r\n            },\r\n            intents: {\r\n                description: 'Requested implicit flow intents.',\r\n                type: 'string[]'\r\n            },\r\n            grants: {\r\n                description: 'Implicit flow intents that have been granted.',\r\n                type: 'string[]'\r\n            },\r\n            session: {\r\n                description: 'Unique implicit session id.',\r\n                type: 'string'\r\n            },\r\n            valid_until: {\r\n                description: 'Session expiration timestamp.',\r\n                type: 'number'\r\n            },\r\n            pubkey: {\r\n                description: 'User-selected public key.',\r\n                type: 'string'\r\n            },\r\n            network: {\r\n                description: 'Stellar network identifier.',\r\n                type: 'string'\r\n            }\r\n        }\r\n    },\r\n    manage_account: {\r\n        title: 'Open account settings',\r\n        description: 'Opens account settings window for a given account.',\r\n        implicitFlow: false,\r\n        params: {\r\n            pubkey: {\r\n                description: 'Specific public key requested by the application.',\r\n                type: 'string',\r\n                required: true\r\n            },\r\n            network: {\r\n                description: 'Stellar network identifier or private network passphrase.',\r\n                type: 'string',\r\n                required: false\r\n            }\r\n        },\r\n        returns: {\r\n            pubkey: {\r\n                description: 'Public key from intent request.',\r\n                type: 'string'\r\n            }\r\n        }\r\n    },\r\n    batch: {\r\n        title: 'Intents batch',\r\n        description: 'Requests execution of several tx intents bundled together. This intent is atomic – a user confirms or rejects all bundled requests at once, with the same account and the same Stellar network.',\r\n        implicitFlow: true,\r\n        params: {\r\n            intents: {\r\n                description: 'Requested tx intents that should be executed together.',\r\n                type: 'object[]',\r\n                required: true\r\n            },\r\n            pubkey: {\r\n                description: 'Specific public key requested by the application.',\r\n                type: 'string',\r\n                required: false\r\n            },\r\n            network: {\r\n                description: 'Stellar network identifier or private network passphrase.',\r\n                type: 'string',\r\n                required: false\r\n            }\r\n        },\r\n        returns: {\r\n            intents: {\r\n                description: 'Requested tx intents.',\r\n                type: 'object[]'\r\n            },\r\n            results: {\r\n                description: 'Array of results for each requested intent.',\r\n                type: 'object[]'\r\n            },\r\n            pubkey: {\r\n                description: 'User-selected public key.',\r\n                type: 'string'\r\n            },\r\n            network: {\r\n                description: 'Stellar network identifier.',\r\n                type: 'string'\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (intentInterface);\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@albedo-link/intent/src/intent-interface.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@albedo-link/intent/src/random-token-generator.js":
/*!************************************************************************!*\
  !*** ./node_modules/@albedo-link/intent/src/random-token-generator.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   generateRandomToken: () => (/* binding */ generateRandomToken)\n/* harmony export */ });\nfunction generateRandomToken() {\r\n    const rn = new Uint32Array(4)\r\n    if (typeof crypto !== 'undefined' && crypto.getRandomValues) {\r\n        crypto.getRandomValues(rn)\r\n    } else {\r\n        for (let i = 0; i < rn.length; i++) {\r\n            rn[i] = Math.floor(Math.random() * 4294967295)\r\n        }\r\n    }\r\n    return Array.from(rn).map(n => n.toString(36)).join('')\r\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFsYmVkby1saW5rL2ludGVudC9zcmMvcmFuZG9tLXRva2VuLWdlbmVyYXRvci5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQU87QUFDUDtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ04sd0JBQXdCLGVBQWU7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2ludmVudG9yeS1tYW5hZ2VyLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzL0BhbGJlZG8tbGluay9pbnRlbnQvc3JjL3JhbmRvbS10b2tlbi1nZW5lcmF0b3IuanM/MGU3NSJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZnVuY3Rpb24gZ2VuZXJhdGVSYW5kb21Ub2tlbigpIHtcclxuICAgIGNvbnN0IHJuID0gbmV3IFVpbnQzMkFycmF5KDQpXHJcbiAgICBpZiAodHlwZW9mIGNyeXB0byAhPT0gJ3VuZGVmaW5lZCcgJiYgY3J5cHRvLmdldFJhbmRvbVZhbHVlcykge1xyXG4gICAgICAgIGNyeXB0by5nZXRSYW5kb21WYWx1ZXMocm4pXHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcm4ubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgcm5baV0gPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiA0Mjk0OTY3Mjk1KVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBBcnJheS5mcm9tKHJuKS5tYXAobiA9PiBuLnRvU3RyaW5nKDM2KSkuam9pbignJylcclxufSJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@albedo-link/intent/src/random-token-generator.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@albedo-link/intent/src/transport-builder.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@albedo-link/intent/src/transport-builder.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createDialogTransport: () => (/* binding */ createDialogTransport),\n/* harmony export */   createIframeTransport: () => (/* binding */ createIframeTransport)\n/* harmony export */ });\n/* harmony import */ var _transport_handler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./transport-handler */ \"(ssr)/./node_modules/@albedo-link/intent/src/transport-handler.js\");\n\r\n\r\n/**\r\n * Create explicit dialog window transport.\r\n * @param {String} frontendUrl - URL of the Albedo frontend.\r\n * @return {TransportHandler}\r\n */\r\nfunction createDialogTransport(frontendUrl) {\r\n    const url = `${frontendUrl}/confirm`,\r\n        w = 480,\r\n        h = 600,\r\n        // Fixes dual-screen position                         Most browsers      Firefox\r\n        dualScreenLeft = window.screenLeft !== undefined ? window.screenLeft : window.screenX,\r\n        dualScreenTop = window.screenTop !== undefined ? window.screenTop : window.screenY,\r\n        currentWindowWidth = window.innerWidth ? window.innerWidth : document.documentElement.clientWidth ? document.documentElement.clientWidth : screen.width,\r\n        currentWindowHeight = window.innerHeight ? window.innerHeight : document.documentElement.clientHeight ? document.documentElement.clientHeight : screen.height,\r\n        left = ((currentWindowWidth / 2) - (w / 2)) + dualScreenLeft,\r\n        top = ((currentWindowHeight / 2) - (h / 2)) + dualScreenTop\r\n\r\n    const dialogWindow = window.open(url, 'auth.albedo.link', `height=${h},width=${w},top=${top},left=${left},menubar=0,toolbar=0,location=0,status=0,personalbar=0,scrollbars=0,dependent=1`)\r\n    return new _transport_handler__WEBPACK_IMPORTED_MODULE_0__[\"default\"](dialogWindow, true).onLoaded\r\n}\r\n\r\nlet sharedIframeTransport = null\r\n\r\n/**\r\n * Create implicit transport based on hidden iframe.\r\n * @param {String} frontendUrl - URL of the Albedo frontend.\r\n * @return {TransportHandler}\r\n */\r\nfunction createIframeTransport(frontendUrl) {\r\n    //check if already initialized\r\n    if (!sharedIframeTransport) {\r\n        const iframe = document.createElement('iframe')\r\n        iframe.style.border = 'none'\r\n        Object.assign(iframe, {\r\n            width: '0',\r\n            height: '0',\r\n            frameBorder: '0',\r\n            referrerPolicy: 'origin',\r\n            src: `${frontendUrl}`\r\n        })\r\n        document.body.appendChild(iframe)\r\n        sharedIframeTransport = new _transport_handler__WEBPACK_IMPORTED_MODULE_0__[\"default\"](iframe.contentWindow)\r\n    }\r\n    return sharedIframeTransport.onLoaded\r\n}\r\n\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFsYmVkby1saW5rL2ludGVudC9zcmMvdHJhbnNwb3J0LWJ1aWxkZXIuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQWtEO0FBQ2xEO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixZQUFZO0FBQ1o7QUFDQTtBQUNBLG1CQUFtQixZQUFZO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0VBQXdFLEVBQUUsU0FBUyxFQUFFLE9BQU8sSUFBSSxRQUFRLEtBQUs7QUFDN0csZUFBZSwwREFBZ0I7QUFDL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLFlBQVk7QUFDaEMsU0FBUztBQUNUO0FBQ0Esb0NBQW9DLDBEQUFnQjtBQUNwRDtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2ludmVudG9yeS1tYW5hZ2VyLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzL0BhbGJlZG8tbGluay9pbnRlbnQvc3JjL3RyYW5zcG9ydC1idWlsZGVyLmpzPzExMzkiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFRyYW5zcG9ydEhhbmRsZXIgZnJvbSAnLi90cmFuc3BvcnQtaGFuZGxlcidcclxuXHJcbi8qKlxyXG4gKiBDcmVhdGUgZXhwbGljaXQgZGlhbG9nIHdpbmRvdyB0cmFuc3BvcnQuXHJcbiAqIEBwYXJhbSB7U3RyaW5nfSBmcm9udGVuZFVybCAtIFVSTCBvZiB0aGUgQWxiZWRvIGZyb250ZW5kLlxyXG4gKiBAcmV0dXJuIHtUcmFuc3BvcnRIYW5kbGVyfVxyXG4gKi9cclxuZnVuY3Rpb24gY3JlYXRlRGlhbG9nVHJhbnNwb3J0KGZyb250ZW5kVXJsKSB7XHJcbiAgICBjb25zdCB1cmwgPSBgJHtmcm9udGVuZFVybH0vY29uZmlybWAsXHJcbiAgICAgICAgdyA9IDQ4MCxcclxuICAgICAgICBoID0gNjAwLFxyXG4gICAgICAgIC8vIEZpeGVzIGR1YWwtc2NyZWVuIHBvc2l0aW9uICAgICAgICAgICAgICAgICAgICAgICAgIE1vc3QgYnJvd3NlcnMgICAgICBGaXJlZm94XHJcbiAgICAgICAgZHVhbFNjcmVlbkxlZnQgPSB3aW5kb3cuc2NyZWVuTGVmdCAhPT0gdW5kZWZpbmVkID8gd2luZG93LnNjcmVlbkxlZnQgOiB3aW5kb3cuc2NyZWVuWCxcclxuICAgICAgICBkdWFsU2NyZWVuVG9wID0gd2luZG93LnNjcmVlblRvcCAhPT0gdW5kZWZpbmVkID8gd2luZG93LnNjcmVlblRvcCA6IHdpbmRvdy5zY3JlZW5ZLFxyXG4gICAgICAgIGN1cnJlbnRXaW5kb3dXaWR0aCA9IHdpbmRvdy5pbm5lcldpZHRoID8gd2luZG93LmlubmVyV2lkdGggOiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50V2lkdGggPyBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50V2lkdGggOiBzY3JlZW4ud2lkdGgsXHJcbiAgICAgICAgY3VycmVudFdpbmRvd0hlaWdodCA9IHdpbmRvdy5pbm5lckhlaWdodCA/IHdpbmRvdy5pbm5lckhlaWdodCA6IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRIZWlnaHQgPyBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50SGVpZ2h0IDogc2NyZWVuLmhlaWdodCxcclxuICAgICAgICBsZWZ0ID0gKChjdXJyZW50V2luZG93V2lkdGggLyAyKSAtICh3IC8gMikpICsgZHVhbFNjcmVlbkxlZnQsXHJcbiAgICAgICAgdG9wID0gKChjdXJyZW50V2luZG93SGVpZ2h0IC8gMikgLSAoaCAvIDIpKSArIGR1YWxTY3JlZW5Ub3BcclxuXHJcbiAgICBjb25zdCBkaWFsb2dXaW5kb3cgPSB3aW5kb3cub3Blbih1cmwsICdhdXRoLmFsYmVkby5saW5rJywgYGhlaWdodD0ke2h9LHdpZHRoPSR7d30sdG9wPSR7dG9wfSxsZWZ0PSR7bGVmdH0sbWVudWJhcj0wLHRvb2xiYXI9MCxsb2NhdGlvbj0wLHN0YXR1cz0wLHBlcnNvbmFsYmFyPTAsc2Nyb2xsYmFycz0wLGRlcGVuZGVudD0xYClcclxuICAgIHJldHVybiBuZXcgVHJhbnNwb3J0SGFuZGxlcihkaWFsb2dXaW5kb3csIHRydWUpLm9uTG9hZGVkXHJcbn1cclxuXHJcbmxldCBzaGFyZWRJZnJhbWVUcmFuc3BvcnQgPSBudWxsXHJcblxyXG4vKipcclxuICogQ3JlYXRlIGltcGxpY2l0IHRyYW5zcG9ydCBiYXNlZCBvbiBoaWRkZW4gaWZyYW1lLlxyXG4gKiBAcGFyYW0ge1N0cmluZ30gZnJvbnRlbmRVcmwgLSBVUkwgb2YgdGhlIEFsYmVkbyBmcm9udGVuZC5cclxuICogQHJldHVybiB7VHJhbnNwb3J0SGFuZGxlcn1cclxuICovXHJcbmZ1bmN0aW9uIGNyZWF0ZUlmcmFtZVRyYW5zcG9ydChmcm9udGVuZFVybCkge1xyXG4gICAgLy9jaGVjayBpZiBhbHJlYWR5IGluaXRpYWxpemVkXHJcbiAgICBpZiAoIXNoYXJlZElmcmFtZVRyYW5zcG9ydCkge1xyXG4gICAgICAgIGNvbnN0IGlmcmFtZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2lmcmFtZScpXHJcbiAgICAgICAgaWZyYW1lLnN0eWxlLmJvcmRlciA9ICdub25lJ1xyXG4gICAgICAgIE9iamVjdC5hc3NpZ24oaWZyYW1lLCB7XHJcbiAgICAgICAgICAgIHdpZHRoOiAnMCcsXHJcbiAgICAgICAgICAgIGhlaWdodDogJzAnLFxyXG4gICAgICAgICAgICBmcmFtZUJvcmRlcjogJzAnLFxyXG4gICAgICAgICAgICByZWZlcnJlclBvbGljeTogJ29yaWdpbicsXHJcbiAgICAgICAgICAgIHNyYzogYCR7ZnJvbnRlbmRVcmx9YFxyXG4gICAgICAgIH0pXHJcbiAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChpZnJhbWUpXHJcbiAgICAgICAgc2hhcmVkSWZyYW1lVHJhbnNwb3J0ID0gbmV3IFRyYW5zcG9ydEhhbmRsZXIoaWZyYW1lLmNvbnRlbnRXaW5kb3cpXHJcbiAgICB9XHJcbiAgICByZXR1cm4gc2hhcmVkSWZyYW1lVHJhbnNwb3J0Lm9uTG9hZGVkXHJcbn1cclxuXHJcbmV4cG9ydCB7Y3JlYXRlRGlhbG9nVHJhbnNwb3J0LCBjcmVhdGVJZnJhbWVUcmFuc3BvcnR9Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@albedo-link/intent/src/transport-builder.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@albedo-link/intent/src/transport-handler.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@albedo-link/intent/src/transport-handler.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _random_token_generator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./random-token-generator */ \"(ssr)/./node_modules/@albedo-link/intent/src/random-token-generator.js\");\n/* harmony import */ var _intent_errors__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./intent-errors */ \"(ssr)/./node_modules/@albedo-link/intent/src/intent-errors.js\");\n\r\n\r\n\r\n/**\r\n * Create transport handler for a given window|iframe and establish communication channel.\r\n * @param {Window} targetWindow - Transport window|iframe reference.\r\n * @param {Boolean} ephemeral - If set to true, automatically closes the window opened after receiving the response.\r\n */\r\nfunction TransportHandler(targetWindow, ephemeral = false) {\r\n    this.windowHandler = targetWindow\r\n    this.ephemeral = !!ephemeral\r\n    this.isLoaded = false\r\n    this.pendingRequests = {}\r\n    this.preprocessRequestParams = null\r\n    this.onLoaded = new Promise((resolve, reject) => this.onLoadedCallback = resolve).then(() => this)\r\n    this.messageHandler = this.messageHandler.bind(this)\r\n    window.addEventListener('message', this.messageHandler, false)\r\n}\r\n\r\nTransportHandler.prototype = {\r\n\r\n    isLoaded: false,\r\n\r\n    protocolVersion: 3,\r\n\r\n    markLoaded() {\r\n        const {onLoadedCallback} = this\r\n        if (onLoadedCallback) {\r\n            this.onLoadedCallback = null\r\n            this.isLoaded = true\r\n            onLoadedCallback()\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Handler for incoming communication messages processing.\r\n     * @param {Object} data - Received data.\r\n     */\r\n    messageHandler({data}) {\r\n        if (data.albedo) {\r\n            this.matchProtocolVersion(data.albedo.protocol)\r\n            return this.markLoaded()\r\n        }\r\n        if (data.albedoIntentResult) {\r\n            const {__reqid, ...result} = data.albedoIntentResult,\r\n                pending = this.pendingRequests[__reqid]\r\n            if (pending) {\r\n                delete this.pendingRequests[__reqid]\r\n                pending(result)\r\n                if (this.ephemeral) {\r\n                    window.removeEventListener('message', this.messageHandler, false)\r\n                    this.windowHandler.close()\r\n                }\r\n            }\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Handler for the transport window close event.\r\n     */\r\n    transportCloseHandler() {\r\n        for (let key in this.pendingRequests)\r\n            if (this.pendingRequests.hasOwnProperty(key)) {\r\n                const pending = this.pendingRequests[key]\r\n                delete this.pendingRequests[key]\r\n                pending(_intent_errors__WEBPACK_IMPORTED_MODULE_1__[\"default\"].actionRejectedByUser)\r\n            }\r\n    },\r\n\r\n    /**\r\n     * Request intent confirmation using current transport.\r\n     * @param {Object} params - Intent request params.\r\n     * @return {Promise}\r\n     */\r\n    postMessage(params) {\r\n        const nonce = (0,_random_token_generator__WEBPACK_IMPORTED_MODULE_0__.generateRandomToken)()\r\n        return new Promise((resolve, reject) => {\r\n            this.onLoaded.then(() => {\r\n                this.pendingRequests[nonce] = handleIntentResponsePromise.bind(this, resolve, reject)\r\n                params = Object.assign({__reqid: nonce, __albedo_intent_version: this.protocolVersion}, params)\r\n                if (this.preprocessRequestParams) {\r\n                    params = this.preprocessRequestParams(params)\r\n                }\r\n                this.windowHandler.postMessage(params, '*')\r\n            })\r\n        })\r\n    },\r\n\r\n    /**\r\n     * Check protocol version compatibility.\r\n     * @param {Number} albedoProtocolVersion\r\n     */\r\n    matchProtocolVersion(albedoProtocolVersion) {\r\n        const versionDif = albedoProtocolVersion - this.protocolVersion\r\n        if (versionDif === 0) return //everything is good\r\n        const error = `@albedo-link/intent module protocol version (${this.protocolVersion}) is incompatible with current Albedo protocol version ${albedoProtocolVersion}.`\r\n        if (versionDif > 0) {\r\n            console.warn(error + ' Please update @albedo-link/intent module to avoid possible connection problems.')\r\n        } else if (versionDif < 0) {\r\n            this.windowHandler.close()\r\n            throw new Error(error)\r\n        }\r\n    }\r\n}\r\n\r\nfunction handleIntentResponsePromise(resolve, reject, res) {\r\n    if (res.error) {\r\n        reject(res)\r\n    } else {\r\n        resolve(res)\r\n    }\r\n}\r\n\r\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (TransportHandler);\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFsYmVkby1saW5rL2ludGVudC9zcmMvdHJhbnNwb3J0LWhhbmRsZXIuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQTREO0FBQ2xCO0FBQzFDO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixXQUFXLFNBQVM7QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLGtCQUFrQjtBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLGVBQWUsUUFBUTtBQUN2QjtBQUNBLG9CQUFvQixLQUFLO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsb0JBQW9CO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixzREFBWTtBQUNwQztBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxlQUFlLFFBQVE7QUFDdkIsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQSxzQkFBc0IsNEVBQW1CO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBLHdDQUF3Qyw4REFBOEQ7QUFDdEc7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2IsU0FBUztBQUNULEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxlQUFlLFFBQVE7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzRUFBc0UscUJBQXFCLHlEQUF5RCxzQkFBc0I7QUFDMUs7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQSxpRUFBZSxnQkFBZ0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pbnZlbnRvcnktbWFuYWdlci1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9AYWxiZWRvLWxpbmsvaW50ZW50L3NyYy90cmFuc3BvcnQtaGFuZGxlci5qcz8wMmNkIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7Z2VuZXJhdGVSYW5kb21Ub2tlbn0gZnJvbSAnLi9yYW5kb20tdG9rZW4tZ2VuZXJhdG9yJ1xyXG5pbXBvcnQgaW50ZW50RXJyb3JzIGZyb20gJy4vaW50ZW50LWVycm9ycydcclxuXHJcbi8qKlxyXG4gKiBDcmVhdGUgdHJhbnNwb3J0IGhhbmRsZXIgZm9yIGEgZ2l2ZW4gd2luZG93fGlmcmFtZSBhbmQgZXN0YWJsaXNoIGNvbW11bmljYXRpb24gY2hhbm5lbC5cclxuICogQHBhcmFtIHtXaW5kb3d9IHRhcmdldFdpbmRvdyAtIFRyYW5zcG9ydCB3aW5kb3d8aWZyYW1lIHJlZmVyZW5jZS5cclxuICogQHBhcmFtIHtCb29sZWFufSBlcGhlbWVyYWwgLSBJZiBzZXQgdG8gdHJ1ZSwgYXV0b21hdGljYWxseSBjbG9zZXMgdGhlIHdpbmRvdyBvcGVuZWQgYWZ0ZXIgcmVjZWl2aW5nIHRoZSByZXNwb25zZS5cclxuICovXHJcbmZ1bmN0aW9uIFRyYW5zcG9ydEhhbmRsZXIodGFyZ2V0V2luZG93LCBlcGhlbWVyYWwgPSBmYWxzZSkge1xyXG4gICAgdGhpcy53aW5kb3dIYW5kbGVyID0gdGFyZ2V0V2luZG93XHJcbiAgICB0aGlzLmVwaGVtZXJhbCA9ICEhZXBoZW1lcmFsXHJcbiAgICB0aGlzLmlzTG9hZGVkID0gZmFsc2VcclxuICAgIHRoaXMucGVuZGluZ1JlcXVlc3RzID0ge31cclxuICAgIHRoaXMucHJlcHJvY2Vzc1JlcXVlc3RQYXJhbXMgPSBudWxsXHJcbiAgICB0aGlzLm9uTG9hZGVkID0gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4gdGhpcy5vbkxvYWRlZENhbGxiYWNrID0gcmVzb2x2ZSkudGhlbigoKSA9PiB0aGlzKVxyXG4gICAgdGhpcy5tZXNzYWdlSGFuZGxlciA9IHRoaXMubWVzc2FnZUhhbmRsZXIuYmluZCh0aGlzKVxyXG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ21lc3NhZ2UnLCB0aGlzLm1lc3NhZ2VIYW5kbGVyLCBmYWxzZSlcclxufVxyXG5cclxuVHJhbnNwb3J0SGFuZGxlci5wcm90b3R5cGUgPSB7XHJcblxyXG4gICAgaXNMb2FkZWQ6IGZhbHNlLFxyXG5cclxuICAgIHByb3RvY29sVmVyc2lvbjogMyxcclxuXHJcbiAgICBtYXJrTG9hZGVkKCkge1xyXG4gICAgICAgIGNvbnN0IHtvbkxvYWRlZENhbGxiYWNrfSA9IHRoaXNcclxuICAgICAgICBpZiAob25Mb2FkZWRDYWxsYmFjaykge1xyXG4gICAgICAgICAgICB0aGlzLm9uTG9hZGVkQ2FsbGJhY2sgPSBudWxsXHJcbiAgICAgICAgICAgIHRoaXMuaXNMb2FkZWQgPSB0cnVlXHJcbiAgICAgICAgICAgIG9uTG9hZGVkQ2FsbGJhY2soKVxyXG4gICAgICAgIH1cclxuICAgIH0sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBIYW5kbGVyIGZvciBpbmNvbWluZyBjb21tdW5pY2F0aW9uIG1lc3NhZ2VzIHByb2Nlc3NpbmcuXHJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gZGF0YSAtIFJlY2VpdmVkIGRhdGEuXHJcbiAgICAgKi9cclxuICAgIG1lc3NhZ2VIYW5kbGVyKHtkYXRhfSkge1xyXG4gICAgICAgIGlmIChkYXRhLmFsYmVkbykge1xyXG4gICAgICAgICAgICB0aGlzLm1hdGNoUHJvdG9jb2xWZXJzaW9uKGRhdGEuYWxiZWRvLnByb3RvY29sKVxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5tYXJrTG9hZGVkKClcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGRhdGEuYWxiZWRvSW50ZW50UmVzdWx0KSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHtfX3JlcWlkLCAuLi5yZXN1bHR9ID0gZGF0YS5hbGJlZG9JbnRlbnRSZXN1bHQsXHJcbiAgICAgICAgICAgICAgICBwZW5kaW5nID0gdGhpcy5wZW5kaW5nUmVxdWVzdHNbX19yZXFpZF1cclxuICAgICAgICAgICAgaWYgKHBlbmRpbmcpIHtcclxuICAgICAgICAgICAgICAgIGRlbGV0ZSB0aGlzLnBlbmRpbmdSZXF1ZXN0c1tfX3JlcWlkXVxyXG4gICAgICAgICAgICAgICAgcGVuZGluZyhyZXN1bHQpXHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5lcGhlbWVyYWwpIHtcclxuICAgICAgICAgICAgICAgICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcignbWVzc2FnZScsIHRoaXMubWVzc2FnZUhhbmRsZXIsIGZhbHNlKVxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMud2luZG93SGFuZGxlci5jbG9zZSgpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9LFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogSGFuZGxlciBmb3IgdGhlIHRyYW5zcG9ydCB3aW5kb3cgY2xvc2UgZXZlbnQuXHJcbiAgICAgKi9cclxuICAgIHRyYW5zcG9ydENsb3NlSGFuZGxlcigpIHtcclxuICAgICAgICBmb3IgKGxldCBrZXkgaW4gdGhpcy5wZW5kaW5nUmVxdWVzdHMpXHJcbiAgICAgICAgICAgIGlmICh0aGlzLnBlbmRpbmdSZXF1ZXN0cy5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBwZW5kaW5nID0gdGhpcy5wZW5kaW5nUmVxdWVzdHNba2V5XVxyXG4gICAgICAgICAgICAgICAgZGVsZXRlIHRoaXMucGVuZGluZ1JlcXVlc3RzW2tleV1cclxuICAgICAgICAgICAgICAgIHBlbmRpbmcoaW50ZW50RXJyb3JzLmFjdGlvblJlamVjdGVkQnlVc2VyKVxyXG4gICAgICAgICAgICB9XHJcbiAgICB9LFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmVxdWVzdCBpbnRlbnQgY29uZmlybWF0aW9uIHVzaW5nIGN1cnJlbnQgdHJhbnNwb3J0LlxyXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHBhcmFtcyAtIEludGVudCByZXF1ZXN0IHBhcmFtcy5cclxuICAgICAqIEByZXR1cm4ge1Byb21pc2V9XHJcbiAgICAgKi9cclxuICAgIHBvc3RNZXNzYWdlKHBhcmFtcykge1xyXG4gICAgICAgIGNvbnN0IG5vbmNlID0gZ2VuZXJhdGVSYW5kb21Ub2tlbigpXHJcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5vbkxvYWRlZC50aGVuKCgpID0+IHtcclxuICAgICAgICAgICAgICAgIHRoaXMucGVuZGluZ1JlcXVlc3RzW25vbmNlXSA9IGhhbmRsZUludGVudFJlc3BvbnNlUHJvbWlzZS5iaW5kKHRoaXMsIHJlc29sdmUsIHJlamVjdClcclxuICAgICAgICAgICAgICAgIHBhcmFtcyA9IE9iamVjdC5hc3NpZ24oe19fcmVxaWQ6IG5vbmNlLCBfX2FsYmVkb19pbnRlbnRfdmVyc2lvbjogdGhpcy5wcm90b2NvbFZlcnNpb259LCBwYXJhbXMpXHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5wcmVwcm9jZXNzUmVxdWVzdFBhcmFtcykge1xyXG4gICAgICAgICAgICAgICAgICAgIHBhcmFtcyA9IHRoaXMucHJlcHJvY2Vzc1JlcXVlc3RQYXJhbXMocGFyYW1zKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdGhpcy53aW5kb3dIYW5kbGVyLnBvc3RNZXNzYWdlKHBhcmFtcywgJyonKVxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgIH0pXHJcbiAgICB9LFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ2hlY2sgcHJvdG9jb2wgdmVyc2lvbiBjb21wYXRpYmlsaXR5LlxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IGFsYmVkb1Byb3RvY29sVmVyc2lvblxyXG4gICAgICovXHJcbiAgICBtYXRjaFByb3RvY29sVmVyc2lvbihhbGJlZG9Qcm90b2NvbFZlcnNpb24pIHtcclxuICAgICAgICBjb25zdCB2ZXJzaW9uRGlmID0gYWxiZWRvUHJvdG9jb2xWZXJzaW9uIC0gdGhpcy5wcm90b2NvbFZlcnNpb25cclxuICAgICAgICBpZiAodmVyc2lvbkRpZiA9PT0gMCkgcmV0dXJuIC8vZXZlcnl0aGluZyBpcyBnb29kXHJcbiAgICAgICAgY29uc3QgZXJyb3IgPSBgQGFsYmVkby1saW5rL2ludGVudCBtb2R1bGUgcHJvdG9jb2wgdmVyc2lvbiAoJHt0aGlzLnByb3RvY29sVmVyc2lvbn0pIGlzIGluY29tcGF0aWJsZSB3aXRoIGN1cnJlbnQgQWxiZWRvIHByb3RvY29sIHZlcnNpb24gJHthbGJlZG9Qcm90b2NvbFZlcnNpb259LmBcclxuICAgICAgICBpZiAodmVyc2lvbkRpZiA+IDApIHtcclxuICAgICAgICAgICAgY29uc29sZS53YXJuKGVycm9yICsgJyBQbGVhc2UgdXBkYXRlIEBhbGJlZG8tbGluay9pbnRlbnQgbW9kdWxlIHRvIGF2b2lkIHBvc3NpYmxlIGNvbm5lY3Rpb24gcHJvYmxlbXMuJylcclxuICAgICAgICB9IGVsc2UgaWYgKHZlcnNpb25EaWYgPCAwKSB7XHJcbiAgICAgICAgICAgIHRoaXMud2luZG93SGFuZGxlci5jbG9zZSgpXHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihlcnJvcilcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGhhbmRsZUludGVudFJlc3BvbnNlUHJvbWlzZShyZXNvbHZlLCByZWplY3QsIHJlcykge1xyXG4gICAgaWYgKHJlcy5lcnJvcikge1xyXG4gICAgICAgIHJlamVjdChyZXMpXHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIHJlc29sdmUocmVzKVxyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBUcmFuc3BvcnRIYW5kbGVyXHJcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@albedo-link/intent/src/transport-handler.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@albedo-link/intent/src/web+stellar-handler.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@albedo-link/intent/src/web+stellar-handler.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   bindWebStellarLinkHandler: () => (/* binding */ bindWebStellarLinkHandler)\n/* harmony export */ });\nfunction parseQuery(query = null) {\r\n    if (query === null) {\r\n        query = window.location.search\r\n    }\r\n    if (query[0] === '?') query = query.substr(1)\r\n    const dest = {}\r\n    for (let kv of query.split('&')) {\r\n        const [key, value] = kv.split('=').map(v => decodeURIComponent(v))\r\n        dest[key] = value\r\n    }\r\n    return dest\r\n}\r\n\r\nfunction bindWebStellarLinkHandler(albedoIntent) {\r\n    if (typeof (document) === 'undefined' || !document.addEventListener) return\r\n    document.addEventListener('click', function sep0007Handler(e) {\r\n        //we are only interested in links with \"web+stellar\" protocol\r\n        if (e.target.tagName !== 'A' || (e.target.href || '').indexOf('web+stellar:') !== 0) return\r\n        e.preventDefault()\r\n        e.stopImmediatePropagation()\r\n        const {pathname: intentName, search} = new URL(e.target.href)\r\n        if (!['tx', 'pay'].includes(intentName)) {\r\n            alert(`Invalid operation requested: ${intentName}. It's likely an external application error. Please contact support team of ${window.location.origin}.`)\r\n            return\r\n        }\r\n\r\n        const params = parseQuery(search)\r\n        albedoIntent.request(intentName, params)\r\n    }, false)\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFsYmVkby1saW5rL2ludGVudC9zcmMvd2ViK3N0ZWxsYXItaGFuZGxlci5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsOEJBQThCO0FBQzdDO0FBQ0Esa0RBQWtELFdBQVcsOEVBQThFLHVCQUF1QjtBQUNsSztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaW52ZW50b3J5LW1hbmFnZXItZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvQGFsYmVkby1saW5rL2ludGVudC9zcmMvd2ViK3N0ZWxsYXItaGFuZGxlci5qcz9iODNlIl0sInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIHBhcnNlUXVlcnkocXVlcnkgPSBudWxsKSB7XHJcbiAgICBpZiAocXVlcnkgPT09IG51bGwpIHtcclxuICAgICAgICBxdWVyeSA9IHdpbmRvdy5sb2NhdGlvbi5zZWFyY2hcclxuICAgIH1cclxuICAgIGlmIChxdWVyeVswXSA9PT0gJz8nKSBxdWVyeSA9IHF1ZXJ5LnN1YnN0cigxKVxyXG4gICAgY29uc3QgZGVzdCA9IHt9XHJcbiAgICBmb3IgKGxldCBrdiBvZiBxdWVyeS5zcGxpdCgnJicpKSB7XHJcbiAgICAgICAgY29uc3QgW2tleSwgdmFsdWVdID0ga3Yuc3BsaXQoJz0nKS5tYXAodiA9PiBkZWNvZGVVUklDb21wb25lbnQodikpXHJcbiAgICAgICAgZGVzdFtrZXldID0gdmFsdWVcclxuICAgIH1cclxuICAgIHJldHVybiBkZXN0XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBiaW5kV2ViU3RlbGxhckxpbmtIYW5kbGVyKGFsYmVkb0ludGVudCkge1xyXG4gICAgaWYgKHR5cGVvZiAoZG9jdW1lbnQpID09PSAndW5kZWZpbmVkJyB8fCAhZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcikgcmV0dXJuXHJcbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uIHNlcDAwMDdIYW5kbGVyKGUpIHtcclxuICAgICAgICAvL3dlIGFyZSBvbmx5IGludGVyZXN0ZWQgaW4gbGlua3Mgd2l0aCBcIndlYitzdGVsbGFyXCIgcHJvdG9jb2xcclxuICAgICAgICBpZiAoZS50YXJnZXQudGFnTmFtZSAhPT0gJ0EnIHx8IChlLnRhcmdldC5ocmVmIHx8ICcnKS5pbmRleE9mKCd3ZWIrc3RlbGxhcjonKSAhPT0gMCkgcmV0dXJuXHJcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpXHJcbiAgICAgICAgZS5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKVxyXG4gICAgICAgIGNvbnN0IHtwYXRobmFtZTogaW50ZW50TmFtZSwgc2VhcmNofSA9IG5ldyBVUkwoZS50YXJnZXQuaHJlZilcclxuICAgICAgICBpZiAoIVsndHgnLCAncGF5J10uaW5jbHVkZXMoaW50ZW50TmFtZSkpIHtcclxuICAgICAgICAgICAgYWxlcnQoYEludmFsaWQgb3BlcmF0aW9uIHJlcXVlc3RlZDogJHtpbnRlbnROYW1lfS4gSXQncyBsaWtlbHkgYW4gZXh0ZXJuYWwgYXBwbGljYXRpb24gZXJyb3IuIFBsZWFzZSBjb250YWN0IHN1cHBvcnQgdGVhbSBvZiAke3dpbmRvdy5sb2NhdGlvbi5vcmlnaW59LmApXHJcbiAgICAgICAgICAgIHJldHVyblxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3QgcGFyYW1zID0gcGFyc2VRdWVyeShzZWFyY2gpXHJcbiAgICAgICAgYWxiZWRvSW50ZW50LnJlcXVlc3QoaW50ZW50TmFtZSwgcGFyYW1zKVxyXG4gICAgfSwgZmFsc2UpXHJcbn1cclxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@albedo-link/intent/src/web+stellar-handler.js\n");

/***/ })

};
;